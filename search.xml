<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript 项目使用 Eslint + Prettier + husky 提高前端项目质量</title>
      <link href="/2020/11/husky/"/>
      <url>/2020/11/husky/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近几年 TypeScript 越来越得到开发者的喜爱，所以在我的推动下，公司也开始使用 TypeScript 来开发微信小程序（正好微信开发工具也支持了）。选择它的原因是因为 TypeScript 提供了静态类型检查的功能，而且还可以使用一些面向对象的编程语法，使得前端代码更加灵活更加严谨。</p><h1 id="规范问题"><a href="#规范问题" class="headerlink" title="规范问题"></a>规范问题</h1><p>由于使用 TypeScript 作为开发微信小程序的语言，所以做了一些小调整，在 Git 提交时排除了所有后缀为 .js 的文件。这样做的好处是，减少冗余文件的提交，只需要提交 .ts 的文件即可。其他开发人员只能修改 .ts 文件，编译出的 .js 只作为本地预览开发使用。但是最终提交到腾讯服务器的还是 .js 文件而不是 .ts。</p><p>所以为了防止一些同事，忘记上传 .ts 文件导致的问题（没有 .ts 文件就无法编译出 .js，没有 .js 文件小程序就无法执行）、还有每个人代码风格不一致，或者代码不规范不严谨，因此我产生几个问题：</p><ul><li>如何让团队拥有更好的代码意识？</li><li>如何使团队的代码风格近乎统一？</li><li>如何防止错误的、不严谨的代码被提交？</li></ul><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><ul><li><a href="https://eslint.org/docs/user-guide/getting-started" target="_blank" rel="noopener">ESLint</a> - 代码检查工具</li><li><a href="https://prettier.io/docs/en/install.html" target="_blank" rel="noopener">Prettier</a> - 代码格式化工具</li><li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">Husky</a> - Git Hook（Git 钩子）</li></ul><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint eslint-config-prettier eslint-plugin-prettier eslint-plugin-typescript husky prettier</code></pre><h2 id="配置-eslintrc-js"><a href="#配置-eslintrc-js" class="headerlink" title="配置 .eslintrc.js"></a>配置 .eslintrc.js</h2><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">,</span>    <span class="token string">"prettier/@typescript-eslint"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 样式规范以 prettier 为准</span>    <span class="token string">"plugin:prettier/recommended"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 样式规范以 prettier 为准</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自定义规则</span>    <span class="token string">"prettier/prettier"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"no-console"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    eqeqeq<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"warn"</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"prefer-const"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> destructuring<span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span> ignoreReadBeforeAssign<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/ban-types"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/no-explicit-any"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/explicit-module-boundary-types"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/no-unused-vars"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/interface-name-prefix"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/explicit-member-accessibility"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/no-triple-slash-reference"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/ban-ts-ignore"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/no-this-alias"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"@typescript-eslint/triple-slash-reference"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span> types<span class="token punctuation">:</span> <span class="token string">"never"</span><span class="token punctuation">,</span> lib<span class="token punctuation">:</span> <span class="token string">"never"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="配置-prettierrc"><a href="#配置-prettierrc" class="headerlink" title="配置 .prettierrc"></a>配置 .prettierrc</h2><p>具体配置参考官网：<a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener">Options</a></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token property">"endOfLine"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"jsxBracketSameLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"arrowParens"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>  <span class="token property">"eslintIntegration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h2 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h2><p>添加 husky 配置，添加 eslint 命令</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"eslint . --ext .ts  --fix"</span><span class="token punctuation">,</span>    <span class="token property">"compile"</span><span class="token operator">:</span> <span class="token string">"./node_modules/typescript/bin/tsc"</span><span class="token punctuation">,</span>    <span class="token property">"tsc"</span><span class="token operator">:</span> <span class="token string">"node ./node_modules/typescript/lib/tsc.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"npm run eslint &amp;&amp; npm run tsc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在提交代码前，ESLint 会根据代码规约检查代码，Prettier 会根据规则自动格式化代码，在这之后会编译 .ts 文件。如果有任何不符合规范的代码，或者是编译报错，提交将无法完成。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add *<span class="token function">git</span> commit -m <span class="token string">'dev'</span></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>借助工具能够实现半自动化代码检查、格式化、编译。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> ESLint </tag>
            
            <tag> Prettier </tag>
            
            <tag> Husky </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《你不知道的JavaScript》笔记之：this</title>
      <link href="/2020/09/jsthis/"/>
      <url>/2020/09/jsthis/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近喜欢利用思维导图这个强大的工具，来梳理和提练知识要点。用的是 <a href="https://naotu.baidu.com/" target="_blank" rel="noopener">百度脑图</a>这个工具，应该是百度目前唯一一款良心产品了。😂 下面我按照思维导图的脉络，去把这个知识点来说清楚吧。（思维导图单击可放大查看）</p><p><img src="/images/this%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.svg" alt="this思维导图.png"></p><h1 id="一、关于-this"><a href="#一、关于-this" class="headerlink" title="一、关于 this"></a>一、关于 this</h1><p>this 关键字是 JavaScript 中最复杂的机制之一。搞懂它有助于驾驭 JavaScript 这匹野马。</p><h1 id="二、对-this-错误的认识"><a href="#二、对-this-错误的认识" class="headerlink" title="二、对 this 错误的认识"></a>二、对 this 错误的认识</h1><p>在我刚从后端转前端初期那段时间，我也一样对 this 有这两大错误认识，这可能是就是 this 最具迷惑性的地方吧。在理解 this 是如何工作之前，我们就先消除这两种对于 this 的错误认识吧。</p><h2 id="2-1-指向自身"><a href="#2-1-指向自身" class="headerlink" title="2.1 指向自身"></a>2.1 指向自身</h2><p>也许是受 Java 语言的影响，在我刚开始学习前端的初期也误以为 JavaScript 的 this 关键字和 Java 中的 this 关键字功能类似。</p><p>让我来回忆一下 this 关键字在 Java 中有哪些用法吧：</p><ol><li>关键字可用来引用当前类的实例变量</li><li>关键字可用于调用当前类方法</li><li>可以用来调用当前类的构造函数</li></ol><p>我在编写 JavaScript 代码初期，认为既然 JavaScript 中函数可以被看作是一个对象，那么在函数中使用 this 从内部引用函数自身也是可行的，顺着这个惯性思维我写下了如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><p>虽然表面上看 foo 被调用了 4 次，但是实际上 foo.count 仍然是 0。所以看来 this.count 和 foo.count 指向的并不是同一个变量。</p><p>在执行 foo.count = 0; 时会在函数对象 foo 添加一个属性 count，而 this.count 则在全局作用域中创建 count 变量，它的值是 NaN。</p><p>那么如何解决这种问题呢？</p><ol><li>通过词法作用域解决（这种方法虽然有效，但是回避了 this）：</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  data<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><ol start="2"><li>通过具名函数解决：</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><ol start="3"><li>通过 call 解决：</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h2 id="2-2-联通作用域"><a href="#2-2-联通作用域" class="headerlink" title="2.2 联通作用域"></a>2.2 联通作用域</h2><p>第二种常见错误是，this 指向函数的作用域。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined 或 TypeError: this.bar is not a function</span></code></pre><p>这段代码具有误导性，企图在 foo 函数中调用 bar（浏览器环境下可以调通，Node 环境下报错），又因为 bar 是在 foo 函数内部中被调用，所以从写法角度去看，会造成在 bar 函数中可以访问到变量 a 的假象，但是实际上并不能。</p><p>以上就是学习 this 最容易犯的两大错误认识。</p><h1 id="三、this-工作机制"><a href="#三、this-工作机制" class="headerlink" title="三、this 工作机制"></a>三、this 工作机制</h1><p>在消除对 this 误解之后，我们来探寻 this 真正的工作机制到底是什么。</p><p>每个函数的 this 是在调用时被绑定的，完全取决于函数的调用位置（也就是函数的调用方法）</p><h1 id="四、理解-this-绑定过程"><a href="#四、理解-this-绑定过程" class="headerlink" title="四、理解 this 绑定过程"></a>四、理解 this 绑定过程</h1><h2 id="4-1-寻找函数被调用的位置"><a href="#4-1-寻找函数被调用的位置" class="headerlink" title="4.1 寻找函数被调用的位置"></a>4.1 寻找函数被调用的位置</h2><p>寻找函数被调用的位置，最重要的就是分析调用栈（就是为了到达当前执行位置所调用的所有函数）。调用位置就在当前正在执行的函数的前一个调用中。</p><p>用代码来表示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当前调用栈：baz</span>  <span class="token comment" spellcheck="true">// 因此，当前调用位置是全局作用域</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"baz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;--- bar 的调用位置</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当前调用栈：baz --> bar</span>  <span class="token comment" spellcheck="true">// 因此，当前调用位置在baz中</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;--- foo 的调用位置</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当前调用栈：baz --> bar --> foo</span>  <span class="token comment" spellcheck="true">// 因此，当前调用位置在bar中</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;--- bar 的调用位置</span><span class="token punctuation">}</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- baz 的调用位置</span></code></pre><h2 id="4-2-判断绑定规则"><a href="#4-2-判断绑定规则" class="headerlink" title="4.2 判断绑定规则"></a>4.2 判断绑定规则</h2><p>在找到函数被调用的位置之后，接下来就可以根据优先级判断适用的绑定规则。<br>以下绑定规则按优先级由高到低排列。</p><h3 id="4-2-1-new-绑定"><a href="#4-2-1-new-绑定" class="headerlink" title="4.2.1 new 绑定"></a>4.2.1 new 绑定</h3><p>使用 new 来调用函数，或者发生构造函数调用时，会自动执行下面这些操作。</p><ol><li>创建（构造）一个全新的对象。</li><li>这个新对象会执行 [[Prototype]]连接。</li><li>这个新对象会绑定到函数调用的 this。</li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>使用 new 调用 foo(…) 时，会构造一个新对象并把它绑定到 foo(…)调用中的 this 上。</p><h3 id="4-2-2-显示绑定"><a href="#4-2-2-显示绑定" class="headerlink" title="4.2.2 显示绑定"></a>4.2.2 显示绑定</h3><p>JavaScript 提供了两个方法可以强制在某个对象上调用函数，call(…) 和 apply(…) 方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>通过 foo.call(…)，我们可以在调用 foo 时强制把它的 this 绑定在 obj 上。</p><h3 id="4-2-3-隐式绑定"><a href="#4-2-3-隐式绑定" class="headerlink" title="4.2.3 隐式绑定"></a>4.2.3 隐式绑定</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 (调用位置)</span></code></pre><p>上面这段代码，调用位置使用 obj 上下文来引用函数，可以说成 obj 对象“拥有”或者“包含”函数引用。</p><p>当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象中。</p><p>对象属性引用链中只有最后一层在调用位置中起作用。举个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  obj2<span class="token punctuation">:</span> obj2<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42 (调用位置)</span></code></pre><h3 id="4-2-4-默认绑定"><a href="#4-2-4-默认绑定" class="headerlink" title="4.2.4 默认绑定"></a>4.2.4 默认绑定</h3><p>最常用的函数调用类型：独立函数调用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当前调用栈是：foo</span>  <span class="token comment" spellcheck="true">// 因此，当前调用位置是全局作用域</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>上面这段代码，foo() 的调用的位于全局作用域中，且 foo() 是直接使用不带任何修饰的函数引用进行调用的，因此适用于默认绑定。</p><p>在严格模式下，则不能将全局对象用于默认绑定，因此 this 会绑定到 undefined。</p><h2 id="4-3-绑定例外"><a href="#4-3-绑定例外" class="headerlink" title="4.3 绑定例外"></a>4.3 绑定例外</h2><h3 id="4-3-1-被忽略的-this"><a href="#4-3-1-被忽略的-this" class="headerlink" title="4.3.1 被忽略的 this"></a>4.3.1 被忽略的 this</h3><p>当 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认规定规则:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h3 id="4-3-2-间接引用"><a href="#4-3-2-间接引用" class="headerlink" title="4.3.2 间接引用"></a>4.3.2 间接引用</h3><p>调用函数的“间接引用”会应用默认绑定规则。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> foo<span class="token punctuation">:</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>foo <span class="token operator">=</span> o<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>复制表达式 <code>p.foo = o.foo</code> 的返回值是目标函数的引用，因此调用位置是 foo() 而不是 p.foo() 或者 o.foo()。</p><h1 id="五、注意"><a href="#五、注意" class="headerlink" title="五、注意"></a>五、注意</h1><h2 id="5-1-箭头函数"><a href="#5-1-箭头函数" class="headerlink" title="5.1 箭头函数"></a>5.1 箭头函数</h2><p>在 ES6 中规范中的箭头函数，完全不适用于四条绑定规则，而是根据当前词法作用域来决定 this。</p><h2 id="5-2-编码风格"><a href="#5-2-编码风格" class="headerlink" title="5.2 编码风格"></a>5.2 编码风格</h2><p>在编码时，词法作用域风格与 this 风格代码不要混用，同时使用会使代码更加难以维护，并且可能也会更难编写。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>如果要判断一个运行中的函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p><ol><li>由 new 调用？绑定到新创建的对象。</li><li>由 call 或者 apply（或者 bind）调用？绑定到指定的对象。</li><li>由上下文对象调用？绑定到那个上下文对象。</li><li>默认：在严格模式下绑定到 undefined，否则绑定到全局对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门Go语言学习笔记</title>
      <link href="/2020/08/golanglearn/"/>
      <url>/2020/08/golanglearn/</url>
      
        <content type="html"><![CDATA[<h1 id="1-编写第一个-Go-程序"><a href="#1-编写第一个-Go-程序" class="headerlink" title="1. 编写第一个 Go 程序"></a>1. 编写第一个 Go 程序</h1><h2 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h2><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 基本程序结构</span><span class="token keyword">package</span> main <span class="token comment" spellcheck="true">// 包，表明代码所在模块（包）</span><span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token comment" spellcheck="true">// 引入代码依赖</span><span class="token comment" spellcheck="true">// 功能实现</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hellow world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="应用程序入口"><a href="#应用程序入口" class="headerlink" title="应用程序入口"></a>应用程序入口</h2><ol><li>必须是 main 包：package main</li><li>必须是 main 方法：func main()</li><li>文件名不一定是 main.go</li></ol><h2 id="退出返回值"><a href="#退出返回值" class="headerlink" title="退出返回值"></a>退出返回值</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>Go 中 main 函数不支持任何返回值</li><li>通过 os.Exit 来返回状态</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>  os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>main 函数不支持传入参数<br>func main(<del>arg []string</del>)</li><li>在程序中直接通过 os.Args 获取命令行参数</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// go run hello_world.go oliver</span><span class="token comment" spellcheck="true">// hello world oliver</span></code></pre><h1 id="2-变量、常量以及与其他语言的差异"><a href="#2-变量、常量以及与其他语言的差异" class="headerlink" title="2. 变量、常量以及与其他语言的差异"></a>2. 变量、常量以及与其他语言的差异</h1><h2 id="编写单元测试程序"><a href="#编写单元测试程序" class="headerlink" title="编写单元测试程序"></a>编写单元测试程序</h2><ol><li>源码文件以 _test 结尾：xxx_test.go</li><li>测试方法名以 Test 开头：func TestXXX(t *testing.T) {…}</li></ol><h2 id="VSCode-调试-Go"><a href="#VSCode-调试-Go" class="headerlink" title="VSCode 调试 Go"></a>VSCode 调试 Go</h2><ol><li>安装 vscode 插件：Go Autotest</li><li>查看 vscode 输出</li></ol><h2 id="单元测试实现一个斐波那契数列"><a href="#单元测试实现一个斐波那契数列" class="headerlink" title="单元测试实现一个斐波那契数列"></a>单元测试实现一个斐波那契数列</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> fib<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestFibList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 赋值方式</span>  <span class="token comment" spellcheck="true">// var a int = 1</span>  <span class="token comment" spellcheck="true">// var b int = 1</span>  <span class="token comment" spellcheck="true">// 赋值方式</span>  <span class="token keyword">var</span> <span class="token punctuation">(</span>    a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    tmp <span class="token operator">:=</span> a    a <span class="token operator">=</span> b    b <span class="token operator">=</span> tmp <span class="token operator">+</span> a  <span class="token punctuation">}</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>赋值可以进行自动类型推断</li><li>在一个赋值语句中可以对多个变量进行同时赋值</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">/**  * 交换两个变量的值  */</span><span class="token keyword">func</span> <span class="token function">TestExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">:=</span> <span class="token number">1</span>  b <span class="token operator">:=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true">// tmp := a</span>  <span class="token comment" spellcheck="true">// a = b</span>  <span class="token comment" spellcheck="true">// b = tmp</span>  a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token comment" spellcheck="true">// 等价于上面那段代码</span>  fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a， b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 1</span><span class="token punctuation">}</span></code></pre><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>快速设置连续值</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 连续常量简写</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  Monday    <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">// 1</span>  Tuesday                   <span class="token comment" spellcheck="true">// 2</span>  Wednesday                 <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 连续位运常量</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  Readable <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>  Writable  Executable<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestContantTry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Monday<span class="token punctuation">,</span> Tuesday<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 2</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestContantTry1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">:=</span> <span class="token number">7</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>Readable <span class="token operator">==</span> Readable<span class="token punctuation">,</span> a<span class="token operator">&amp;</span>Writable <span class="token operator">==</span> Writable<span class="token punctuation">,</span> a<span class="token operator">&amp;</span>Executable <span class="token operator">==</span> Executable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true true true</span><span class="token punctuation">}</span></code></pre><h1 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3. 基本数据类型"></a>3. 基本数据类型</h1><ul><li>bool</li><li>string</li><li>int int8 int16 int32 int64</li><li>uint uint8 uint16 uint32 uint64 uintptr</li><li>byte // alias for uint8</li><li>rune // alias fro int32, represnts a Unicode code point</li><li>float32 float64</li><li>complex64 complex128</li></ul><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p><strong>与其他主要编程语言的差异</strong></p><ol><li>Go 语言不允许隐式类型转换</li><li>别名和原有类型也不能进行隐式类型转换</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> MyIntType <span class="token builtin">int64</span><span class="token keyword">func</span> <span class="token function">TestImplicit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> b <span class="token builtin">int64</span>    b <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">var</span> c MyIntType    <span class="token comment" spellcheck="true">// c = b              // Error：不允许隐式类型转换</span>    c <span class="token operator">=</span> <span class="token function">MyIntType</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1 1 1</span><span class="token punctuation">}</span></code></pre><h2 id="类型的预定义值"><a href="#类型的预定义值" class="headerlink" title="类型的预定义值"></a>类型的预定义值</h2><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUnit32</li></ol><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><p><strong>与其他主要编程语言的差异</strong></p><ol><li>不支持指针运算</li><li>string 是值类型，其默认的初始化值为空字符串，而不是 nil</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">:=</span> <span class="token number">1</span>  aPtr <span class="token operator">:=</span> <span class="token operator">&amp;</span>a  <span class="token comment" spellcheck="true">// aPtr = aPtr + 1             // Error: 不支持指针运算</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %T"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 0xc000014258</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token builtin">string</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// **</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 0</span>  <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"空字符串！"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 空字符串！</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>A + B 输出结果 30</td></tr><tr><td>-</td><td>相减</td><td>A - B 输出结果 - 10</td></tr><tr><td>*</td><td>相乘</td><td>A - B 输出结果 200</td></tr><tr><td>/</td><td>相除</td><td>B / A 输出结果 2</td></tr><tr><td>%</td><td>求余</td><td>B % A 输出结果 0</td></tr><tr><td>++</td><td>自增</td><td>A++ 输出结果 11</td></tr><tr><td>–</td><td>自减</td><td>A– 输出结果 9</td></tr></tbody></table><p><strong>Go 语言没有前置的 ++，–，<del>（++a）</del></strong></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个值是否相等，如果相等返回 True 否则返回 False</td><td>(A==B) 为 False</td></tr><tr><td>!=</td><td>检查两个值是否不相等，如果不相等返回 True 否则返回 False</td><td>(A != B) 为 Ttue</td></tr><tr><td>&gt;</td><td>检查左边值是否大于右边值，如果是返回 True 否则返回 False</td><td>(A&gt;B) 为 False</td></tr><tr><td>&lt;</td><td>检查左边值是否小于右边值，如果是返回 True 否则返回 False</td><td>(A&lt;B) 为 Ttue</td></tr><tr><td>&gt;=</td><td>检查左边值是否大于等于右边值，如果是返回 True 否则返回 False</td><td>(A&gt;=B) 为 False</td></tr><tr><td>&lt;=</td><td>检查左边值是否小于等于右边值，如果是返回 True 否则返回 False</td><td>(A&lt;=B) 为 Ttue</td></tr></tbody></table><h2 id="用-比较数组"><a href="#用-比较数组" class="headerlink" title="用 == 比较数组"></a>用 == 比较数组</h2><ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相同的才相等</li></ul><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>&amp;^ 按位置零<table><thead><tr><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>1 &amp;^ 0</td><td>1</td></tr><tr><td>1 &amp;^ 1</td><td>0</td></tr><tr><td>0 &amp;^ 1</td><td>0</td></tr><tr><td>0 &amp;^ 0</td><td>0</td></tr></tbody></table></li></ul><h1 id="5-条件和循环"><a href="#5-条件和循环" class="headerlink" title="5. 条件和循环"></a>5. 条件和循环</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// while 条件循环</span><span class="token comment" spellcheck="true">// while (n&lt;5)</span>n <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> n <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>    n <span class="token operator">++</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 无限循环</span><span class="token comment" spellcheck="true">// while (true)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do sth</span><span class="token punctuation">}</span></code></pre><p><strong>与其他主要编程语言的差异</strong></p><ul><li>Go 语言仅支持循环关键字 for</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestWhileLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  n <span class="token operator">:=</span> <span class="token number">0</span>  <span class="token keyword">for</span> n <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>    n<span class="token operator">++</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0 1 2 3 4</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="if-条件"><a href="#if-条件" class="headerlink" title="if 条件"></a>if 条件</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> condition <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件成立</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件不成立</span><span class="token punctuation">}</span><span class="token keyword">if</span> condition1 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件成立</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件成立</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件不成立</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token keyword">var</span> declaration<span class="token punctuation">;</span> conditon <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件成立</span><span class="token punctuation">}</span></code></pre><p><strong>与其他主要编程语言的差异</strong></p><ol><li>condition 表达式结果必须为布尔值</li><li>支持变量赋值</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">someFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do sth  </span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestIfMultiSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span>err <span class="token operator">:=</span> <span class="token function">someFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="switch-条件"><a href="#switch-条件" class="headerlink" title="switch 条件"></a>switch 条件</h2><p><strong>与其他主要编程语言的差异</strong></p><ol><li>条件表达式不限制为常量或者整数</li><li>单个 case 中，可以出现多个结果选项，使用逗号分隔</li><li>与 C 语言等规则相反，Go 语言不需要用 break 来明确退出一个 case</li><li>可以不设定 switch 之后的条件表达式，在此种情况下，整个 switch 结构与多个 if…else… 的逻辑作用等同</li></ol><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">func</span> <span class="token function">TestSwitchMultCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> i <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Even"</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Odd"</span><span class="token punctuation">)</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"is not 0-3"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">func</span> <span class="token function">TestSwitchCaseCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Even"</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Odd"</span><span class="token punctuation">)</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unkno"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="6-数组和切片"><a href="#6-数组和切片" class="headerlink" title="6. 数组和切片"></a>6. 数组和切片</h1><h2 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestArrayInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>  arr1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>  arr3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>  arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestArrayTravel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  arr3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 写法一</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 写法二</span>  <span class="token keyword">for</span> idx<span class="token comment" spellcheck="true">/*索引*/</span><span class="token punctuation">,</span> e<span class="token comment" spellcheck="true">/*元素*/</span> <span class="token operator">:=</span> <span class="token keyword">range</span> arr3 <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 写法三 不在乎索引</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token comment" spellcheck="true">/*索引*/</span><span class="token punctuation">,</span> e<span class="token comment" spellcheck="true">/*元素*/</span> <span class="token operator">:=</span> <span class="token keyword">range</span> arr3 <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="数组的截取"><a href="#数组的截取" class="headerlink" title="数组的截取"></a>数组的截取</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestArraySection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  arr3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1 2 3]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [4 5]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1 2 3 4 5]</span><span class="token punctuation">}</span></code></pre><h2 id="切片内部结构"><a href="#切片内部结构" class="headerlink" title="切片内部结构"></a>切片内部结构</h2><p><img src="/images/1598367130399.jpg" alt="切片内部结构.png"></p><h2 id="切片声明"><a href="#切片声明" class="headerlink" title="切片声明"></a>切片声明</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestSliceInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s0 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 0</span>  s0 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 1</span>  s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 4</span>  <span class="token comment" spellcheck="true">/**   * []type, len, cap   * 其中len个元素会被初始化为默认零值，未初始化元素不可以访问   */</span>  s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3 5</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 0</span>  s2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 0 1</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 5</span><span class="token punctuation">}</span></code></pre><h2 id="切片共享存储结构"><a href="#切片共享存储结构" class="headerlink" title="切片共享存储结构"></a>切片共享存储结构</h2><p><img src="/images/1598367323596.jpg" alt="切片共享存储结构.png"></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestSliceShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  year<span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"jan"</span><span class="token punctuation">,</span> <span class="token string">"feb"</span><span class="token punctuation">,</span> <span class="token string">"mar"</span><span class="token punctuation">,</span> <span class="token string">"apr"</span><span class="token punctuation">,</span> <span class="token string">"may"</span><span class="token punctuation">,</span><span class="token string">"jun"</span><span class="token punctuation">,</span> <span class="token string">"jul"</span><span class="token punctuation">,</span> <span class="token string">"aug"</span><span class="token punctuation">,</span> <span class="token string">"sep"</span><span class="token punctuation">,</span><span class="token string">"oct"</span><span class="token punctuation">,</span><span class="token string">"nov"</span><span class="token punctuation">,</span><span class="token string">"dec"</span><span class="token punctuation">}</span>  Q2 <span class="token operator">:=</span> year<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Q2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>Q2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>Q2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [apr may jun] 3 9</span>  summer <span class="token operator">:=</span> year<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>summer<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [jun jul aug] 3 7</span>  summer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Unknow"</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Q2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [apr may Unknow]</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [jan feb mar apr may Unknow jul aug sep oct nov dec]</span><span class="token punctuation">}</span></code></pre><h1 id="7-Map"><a href="#7-Map" class="headerlink" title="7. Map"></a>7. Map</h1><h2 id="Map-声明"><a href="#Map-声明" class="headerlink" title="Map 声明"></a>Map 声明</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestInitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">// 4</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len m1=%d \n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// len m1=3</span>  m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  m2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len m2=%d \n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// len m2=1</span>  m3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len m3=%d \n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// len m3=0</span><span class="token punctuation">}</span></code></pre><h2 id="Map-元素访问"><a href="#Map-元素访问" class="headerlink" title="Map 元素访问"></a>Map 元素访问</h2><p><strong>与其他主要编程语言的差异</strong><br>在访问的 Key 不存在时，仍会返回零值，不能通过返回 nil 来判断元素是否存在</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestAccessNotExistingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  m1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key 3's value is %d \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key 3 is not existing. \n"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Map-遍历"><a href="#Map-遍历" class="headerlink" title="Map 遍历"></a>Map 遍历</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestTravelMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m1 <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**控制台输出：1 12 43 9*/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模仿 Postwoman 实现了一个自己的接口调试工具</title>
      <link href="/2020/08/postchild/"/>
      <url>/2020/08/postchild/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>想必大家平日里开发接口，或多或少都用过 postman 这款接口测试工具，应该都对他不陌生。近日偶然发现一款 web 版接口测试工具并且免费开源。对，它就是 <a href="https://postwoman.io/" target="_blank" rel="noopener">postwoman</a>，清爽帅气的 UI 界面，强大的功能，相对 postman 丝毫不逊色，令我啧啧称赞。</p><h1 id="2-动机"><a href="#2-动机" class="headerlink" title="2. 动机"></a>2. 动机</h1><p>出于学习的目的，我也模仿开发了一个精简版接口测试工具并起名为 <a href="http://postchild.io" target="_blank" rel="noopener">postchild</a>。<br>既然是学习的目的，在此次项目中我会尽可能的减少第三方库的使用，尽量靠自己写代码去实现。在过程，也是一种对知识的查漏补缺，尤其是我对 web 通讯、http 协议这方面的不足。下面将会简单介绍一下运用到的技术栈和对未来打算实现的功能。</p><h1 id="3-技术栈"><a href="#3-技术栈" class="headerlink" title="3. 技术栈"></a>3. 技术栈</h1><ol><li>Vue</li><li>Nuxt</li><li>Axios</li><li>Travis CI</li></ol><h1 id="4-功能清单"><a href="#4-功能清单" class="headerlink" title="4. 功能清单"></a>4. 功能清单</h1><ul><li>✅ 基本请求 GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH</li><li>✅ 历史记录(vuex 实现)</li><li>⌛ WebSocket</li><li>⌛ SocketIO</li><li>⌛ gRPC</li><li>⌛ GraphQL</li><li>⌛ 界面主题色切换</li><li>⌛ 授权登录(为了储存历史记录和收藏夹)</li><li>⌛ 收藏夹功能</li></ul><h1 id="5-体验地址"><a href="#5-体验地址" class="headerlink" title="5. 体验地址"></a>5. 体验地址</h1><p>最后再发一下体验地址: <a href="http://postchild.io" target="_blank" rel="noopener">http://postchild.io</a><br>……</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 我的项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
            <tag> Vue </tag>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的LeetCode之旅「除数博弈」</title>
      <link href="/2020/08/divisorgame/"/>
      <url>/2020/08/divisorgame/</url>
      
        <content type="html"><![CDATA[<h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。</p><p>最初，黑板上有一个数字  N 。在每个玩家的回合，玩家需要执行以下操作：</p><p>选出任一  x，满足  0 &lt; x &lt; N 且  N % x == 0 。<br>用 N - x  替换黑板上的数字 N 。<br>如果玩家无法执行这些操作，就会输掉游戏。</p><p>只有在爱丽丝在游戏中取得胜利时才返回  True，否则返回 False。假设两个玩家都以最佳状态参与游戏。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><p>示例 1:</p><blockquote><p>输入：2<br>输出：true<br>解释：爱丽丝选择 1，鲍勃无法进行操作。</p></blockquote><p>示例 2:</p><blockquote><p>输入：3<br>输出：false<br>解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。</p></blockquote><h1 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h1><p>语言：javascript</p><p>思路：爱丽丝拿到偶数必定胜利、拿到奇数必定失败</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number} N * @return {boolean} */</span><span class="token keyword">var</span> divisorGame <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> N <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的LeetCode之旅「两数相加」</title>
      <link href="/2020/07/addtwonumbers/"/>
      <url>/2020/07/addtwonumbers/</url>
      
        <content type="html"><![CDATA[<h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>给出两个   非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照   逆序   的方式存储的，并且它们的每个节点只能存储   一位   数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0  开头。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><h1 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h1><p>语言：javascript</p><p>思路：循环两个链表，挨个取出其中的 val，同时组装成一个链表的数据结构。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {ListNode} l1 * @param {ListNode} l2 * @return {ListNode} */</span><span class="token keyword">const</span> addTwoNumbers <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否需要进位</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最终返回的结果</span>  <span class="token comment" spellcheck="true">// 循环，直到 l1 和 l2 同时为 null</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> carry <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 本轮的计算相加的变量 v（上一轮需要进位，所以可能初始值为1）</span>    carry <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重置</span>    <span class="token comment" spellcheck="true">// 如果 l1 不为空，v 追加 l1.val，同时将 l1.next 覆盖当前作用域的 l1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token punctuation">(</span>v <span class="token operator">+</span><span class="token operator">=</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token punctuation">(</span>v <span class="token operator">+</span><span class="token operator">=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    next<span class="token punctuation">.</span>val <span class="token operator">=</span> v <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取余数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 因为本轮计算结果大于等于10，需要进位</span>      <span class="token comment" spellcheck="true">// 所以将下一个链表中值修改成 1</span>      next <span class="token operator">=</span> next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      carry <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      next <span class="token operator">=</span> next<span class="token punctuation">.</span>next <span class="token operator">=</span> l1 <span class="token operator">||</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的LeetCode之旅「两数之和」</title>
      <link href="/2020/07/sumoftwonumbers/"/>
      <url>/2020/07/sumoftwonumbers/</url>
      
        <content type="html"><![CDATA[<h1 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h1><p>给定一个整数数组 nums  和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><h1 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h1><blockquote><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p></blockquote><h1 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h1><p>语言：javascript</p><p>思路：遍历 <code>nums</code>，用 <code>target</code> 数值与数组 <code>nums</code> 中每个数值相减获得到另一个数值，如果这个数值刚好存在<code>nums</code> 中，则返回。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">const</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 遍历 `nums` 数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 求目标减去当前索引的数值</span>    <span class="token keyword">let</span> disc <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查找 `nums` 数组中是否存在这个值</span>    <span class="token keyword">let</span> idx <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!==</span> i <span class="token operator">&amp;&amp;</span> idx <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《你不知道的JavaScript》笔记之：作用域</title>
      <link href="/2020/06/jsscope/"/>
      <url>/2020/06/jsscope/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作用域在 JavaScript 中是个一直是个老生长谈的话题，因为涉及到到原理非常深，知识点非常广，困扰着无数新手前端，我就是其中一个。恰好最近读了《你不知道的 JavaScript》这本书，书中的第一章节就介绍了 JavaScript 的作用域，作者用着非常生动的文字和拟人的手法，描述了 JavaScript 执行过程中：引擎、编译器和作用域分别扮演的不同角色与职责。<br>（思维导图单击可放大查看）</p><p><img src="/images/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.svg" alt="作用域思维导图.png"></p><h1 id="一、关于作用域"><a href="#一、关于作用域" class="headerlink" title="一、关于作用域"></a>一、关于作用域</h1><p>作用域几乎是所有编程语言最基本的功能之一，其基本功能就是储存变量中的值，并且能在之后对这个值进行访问或修改。</p><h1 id="二、编译原理"><a href="#二、编译原理" class="headerlink" title="二、编译原理"></a>二、编译原理</h1><hr><p>了解过编译原理的同学可能都会知道，大多数编程语言在执行前，一般要经过：词法分析、语法分析、代码优化、生成中间码或生成指定平台的 CPU 指令（这里对编译的流程的解释过于粗略，后面打算专门几篇文章来梳理编译原理）。</p><p>那么为什么我要简单聊一下编译过程呢？这就和 JavaScript 语言的特殊性息息相关了，我们通常把 JavaScript 认为是“解释型”语言，但归根结底它还是一门编译语言，只不过它的某些环节变的相当复杂。比如，它的构建过程是在执行前的几微秒内发生的（甚至更短），所以 JavaScript 引擎用尽各种方法（比如 JIT，可以延迟编译）来保证性能最佳。</p><p>简单来说，任何 JavaScript 代码片段在执行前都需要进行编译（通常就是在执行前）。那么你可能会问了，这个高深莫测的编译原理和我今天讨论的主题有什么关联呢？我们先怀揣着疑问，继续看下去。</p><h1 id="三、理解作用域"><a href="#三、理解作用域" class="headerlink" title="三、理解作用域"></a>三、理解作用域</h1><hr><h2 id="3-1-嘉宾表"><a href="#3-1-嘉宾表" class="headerlink" title="3.1 嘉宾表"></a>3.1 嘉宾表</h2><p>下面邀请出今晚最重要的三位嘉宾，它们分别是：引擎、编译器和作用域，掌声欢迎。</p><p>我叫引擎，执行 JavaScript 可少不了我的存在，我负责 JavaScript 编译、优化、执行的全过程。</p><p>我叫编译器，是引擎大哥的最重要的助手，在接到引擎大哥交给我的 JavaScript 代码片段之后，我会立刻将其转换成 AST（抽象语法树）。在把 AST 交给引擎大哥前，我还会与作用域先生（那个家伙脾气可不太好）一起协调确认作用域规则。</p><p>我叫作用域，是引擎的另一位好朋友，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则。不过我的脾气比较粗暴，因为编译器总是会问我，“你有没有见过变量 a ”、“你有没有见过函数 foo ”等之类的问题，通常如果我见过就会返回这个变量，如果从来没见过的话，就会给编译器脸色看（抛出一个异常）。</p><h2 id="3-2-引擎查找变量规则"><a href="#3-2-引擎查找变量规则" class="headerlink" title="3.2 引擎查找变量规则"></a>3.2 引擎查找变量规则</h2><p>在正式理解作用域之前，我们得先了解一下这个概念————编译器的 LHS RHS，也就是 JavaScript 是如何变量声明和赋值。</p><p>当出现赋值操作时，编译器会使用 LHS 方法沿着作用域链，从当前作用域到顶层作用域中挨个查询目标，如果一直没有找到该目标，则会抛出异常（ReferenceError）程序就不会再往下执行，请看下面的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>当引擎去执行这段代码的时候，其实分成了两步：<br>第一步：编译器在把代码转换成 AST 树后，引擎会为 a 当前所在的作用域内开辟一个名为 a 的容器（通常作用域在执行前确定）。<br>第二步：接着编译器会使用 LHS 规则去查找这个名为 a 的容器，最后给这个名为 a 的容器赋值。</p><p>当出现取值操作时，编译器会使用 RHS 方法沿着作用域链，从当前作用域到顶层作用域中挨个查询目标，如果一直没有找到该目标，则会跑出异常（ReferenceError）程序就不会再往下执行，请看下面的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从 <code>foo(a);</code> 这行代码开始，首先会按 RHS 规则查询 foo，如果查询成功，则继续查询 a，如果查询成功将 a 的值映射到 foo 函数的 arguments[0] ，于是执行 <code>console.log(b);</code>。其实这里的 <code>console.log</code> 也会按照 RHS 的规则查找当前作用域中是否存在 <code>console</code>，以此类推，继续查找 <code>console.log</code>;</p><h2 id="四、作用域嵌套"><a href="#四、作用域嵌套" class="headerlink" title="四、作用域嵌套"></a>四、作用域嵌套</h2><p>作用域还存在作用域嵌套的问题，比如 <code>foo</code> 就嵌套在全局作用域当中，<code>boo</code> 嵌套在 <code>foo</code> 的函数作用域中，我们看下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">boo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">boo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码的执行结果最终是什么呢？答案是 <code>1, 3, 9</code>, 虽然 foo 函数内部和 boo 函数内部都有名称为 c 的变量名，但是根据作用域的规则，它总是取离他最近的那个变量。所以外层的 c 会被里层的 c 所覆盖。但是在严格模式下，这种行为不被允许。</p><h1 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h1><ul><li>通常作用域在 JavaScript 引擎执行代码片段前，且一经确认则不会再发生改变</li><li>作用域与 JavaScript 编译器的两种查询规则紧密配合： LHS、RHS</li><li>作用域存在作用域嵌套问题，变量同名的情况下，内部的优先级高于外部的优先级</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 工程配置</title>
      <link href="/2020/06/tsconfig/"/>
      <url>/2020/06/tsconfig/</url>
      
        <content type="html"><![CDATA[<h1 id="一、文件选项配置"><a href="#一、文件选项配置" class="headerlink" title="一、文件选项配置"></a>一、文件选项配置</h1><hr><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.base.json"</span><span class="token punctuation">,</span> // 继承其他配置文件 可以被覆盖  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/a.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译器需要编译的单个文件列表  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"src"</span><span class="token punctuation">,</span> // 编译器只编译src下的文件（包含子目录）    <span class="token string">"src/*"</span><span class="token punctuation">,</span> // 编译器只编译src一级目录下的文件    <span class="token string">"src/*/*"</span> // 编译器只编译src下二级目录下的文件  <span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译器需要编译的文件或目录（包含子目录）列表  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"src/lib"</span> // 只排除src/lib所有文件  <span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译器需要排除的文件或文件夹（默认排除node_module和其他声明文件）  <span class="token property">"compileOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span> // 保存时自动编译（vscode尚未支持 <span class="token number">2020.02</span>.<span class="token number">03</span>）<span class="token punctuation">}</span></code></pre><h1 id="二、编译选项配置"><a href="#二、编译选项配置" class="headerlink" title="二、编译选项配置"></a>二、编译选项配置</h1><hr><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"incremental"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 增量编译，提高编译速度    <span class="token property">"tsBuildInfoFile"</span><span class="token operator">:</span> <span class="token string">"./buildFile"</span><span class="token punctuation">,</span> // 增量编译文件的存储位置    <span class="token property">"diagnostics"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 打印诊断信息    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span> // 目标语言的版本    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span> // 生成代码的模块标准    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"./app.js"</span><span class="token punctuation">,</span> // 将多个互相依赖的文件生成一个文件，可以用在 AMD 模块中    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"es2019.array"</span><span class="token punctuation">,</span> // 导入此类库，可以使用高版本的语法    <span class="token punctuation">]</span><span class="token punctuation">,</span> // TS 需要引用的库，即声明文件，es5 默认 <span class="token string">"dom"</span><span class="token punctuation">,</span> <span class="token string">"es5"</span><span class="token punctuation">,</span> <span class="token string">"scripthost"</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许编译 JS 文件 （js、jsx）    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许在 JS 文件中报错，通常与 allowJs 一起使用    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./out"</span><span class="token punctuation">,</span><span class="token punctuation">,</span> // 指定输出目录    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span> // 指定输入文件目录（用于输出）    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成声明文件    <span class="token property">"declarationDir"</span><span class="token operator">:</span> <span class="token string">"./d"</span><span class="token punctuation">,</span> // 声明文件的路径    <span class="token property">"emitDeclarationOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 只生成声明文件    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成目标文件的 sourceMap    <span class="token property">"inlineSourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成目标文件的 inline sourceMap    <span class="token property">"declarationMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成声明文件的 sourceMap    <span class="token property">"typeRoots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 声明文件目录，默认 node_module/@types    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 只加载某个声明包文件列表    <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 删除注释    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 不输出文件    <span class="token property">"noEmitOnError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 发生错误时，不输出文件    <span class="token property">"noEmitHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 不生成 helper 函数，需额外安装 ts-helpers    <span class="token property">"importHelps"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 通过 tslib 引入 helper 函数，文件必须是模块    <span class="token property">"downlevelIteration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 降级遍历器的实现（es3/<span class="token number">5</span>）    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 开启所有严格的类型检查    <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 在代码中主入 <span class="token string">"use strict"</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 不允许隐式的 any 类型    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 不允许把 <span class="token null">null</span>、undefined 赋值给其他类型变量    <span class="token property">"strictPropertyInitalization"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 类实例属性必须 初始化    <span class="token property">"strictBindCallAppy"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 严格的 bind/call/apply 检查    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 不允许 this 有隐式的 any 类型    <span class="token property">"noUnuserLocals"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 检查只声明，未使用的局部变量    <span class="token property">"noUnusedParameters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> //  检查未使用的函数参数    <span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 防止 switch 语句贯穿    <span class="token property">"noImplicitReturns"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 每个分支都要有返回值    <span class="token property">"esMoudleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许 export = 导出，由 import from 导入    <span class="token property">"allowUmdGlobalAccess"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许在模块中放访问 UMD 全局变量    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span> // 模块解析策略    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span> // 解析非相对模块的基地址    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules/jquery/dist/jquery.slim.min.js"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> // 为jquery指定一个精简的文件    <span class="token property">"rootDirs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 将多个目录放在一个虚拟目录下，用于运行时    <span class="token property">"listEmittedFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 打印输出文件    <span class="token property">"listFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 打印编译的文件（包括引用的声明文件）  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="三、工程引用"><a href="#三、工程引用" class="headerlink" title="三、工程引用"></a>三、工程引用</h1><hr><blockquote><p>场景：在一个代码仓库中，存放多个需要单独构建的工程。<br>例如一个全栈工程，有客户端和服务端，提取出共一些公用的代码，存放到一个公共文件夹下。</p></blockquote><pre><code>├─src --------------------------------------------- // 项目代码│ ├─client ---------------------------------------- // 客户端│ │ ├─index.ts ------------------------------------ // 客户端示例文件│ │ └─tsconfig.json ------------------------------- // 客户端配置文件│ ├─common ---------------------------------------- // 公共│ │ ├─index.ts ------------------------------------ // 公共示例文件│ │ └─tsconfig.json ------------------------------- // 公共配置文件│ ├─server ---------------------------------------- // 服务端│ │  ├─index.ts ----------------------------------- // 服务端示例文件│ │  └─tsconfig.json ------------------------------ // 服务端配置文件├─test -------------------------------------------- // 测试用例│ ├─client.test.ts -------------------------------- // 客户端测试用例│ ├─server.test.ts -------------------------------- // 服务端测试用例│ └─tsconfig.json --------------------------------- // 测试用例配置文件└─tsconfig.json ------------------------------------// 整个项目的配置</code></pre><h2 id="3-1-整个项目的配置"><a href="#3-1-整个项目的配置" class="headerlink" title="3.1 整个项目的配置"></a>3.1 整个项目的配置</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"composit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 工程可以被引用，可以增量编译    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-客户端配置文件"><a href="#3-2-客户端配置文件" class="headerlink" title="3.2 客户端配置文件"></a>3.2 客户端配置文件</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"../../tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"../../dist/client"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../common"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-服务端配置文件"><a href="#3-3-服务端配置文件" class="headerlink" title="3.3 服务端配置文件"></a>3.3 服务端配置文件</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"../../tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"../../dist/server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../common"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-测试用例配置文件"><a href="#3-4-测试用例配置文件" class="headerlink" title="3.4 测试用例配置文件"></a>3.4 测试用例配置文件</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"../tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../src/client"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../src/server"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-构建"><a href="#3-5-构建" class="headerlink" title="3.5 构建"></a>3.5 构建</h2><pre class=" language-bash"><code class="language-bash">tsc -b src/client --verbose // 构建客户端tsc -b src/server --verbose // 构建服务端tsc -b <span class="token function">test</span> --clean // 清空构建的文件</code></pre><h2 id="3-6-工程引用优点"><a href="#3-6-工程引用优点" class="headerlink" title="3.6 工程引用优点"></a>3.6 工程引用优点</h2><ul><li>解决输出目录结构的问题</li><li>解决了单个工程构建的问题</li><li>通过增量编译提高编译速度</li></ul><h1 id="四、编译工具"><a href="#四、编译工具" class="headerlink" title="四、编译工具"></a>四、编译工具</h1><hr><h2 id="4-1-如何选择-TypeScript-编译工具？"><a href="#4-1-如何选择-TypeScript-编译工具？" class="headerlink" title="4.1 如何选择 TypeScript 编译工具？"></a>4.1 如何选择 TypeScript 编译工具？</h2><ol><li>如果没有使用过 Babel，首选 TypeScript 自生的编译器（可配合 ts-loader 使用）</li><li>如果项目中已经使用了 Babel，安装 @bable/preset-typescript（可配合 tsc 做类型检查）</li><li>两种编译工具不要混用</li></ol><h2 id="4-2-ts-loader（推荐）"><a href="#4-2-ts-loader（推荐）" class="headerlink" title="4.2 ts-loader（推荐）"></a>4.2 ts-loader（推荐）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.base.config.js</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ForkTsCheckerWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fork-ts-checker-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/class.ts"</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 为true时只做语言转换，不做类型检查（编译时无法发现错误，需要借助第三方插件：fork-ts-checker-webpack-plugin）</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">"./src/tpl/index.html"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ForkTsCheckerWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-3-awesome-typescript-loader（不推荐）"><a href="#4-3-awesome-typescript-loader（不推荐）" class="headerlink" title="4.3 awesome-typescript-loader（不推荐）"></a>4.3 awesome-typescript-loader（不推荐）</h2><blockquote><p>与 ts-loader 的主要区别：</p><ol><li>更适合与 Babel 集成，使用 Babel 的转义和缓存</li><li>不需要安装额外的插件，就可以把类型检查放在独立进程中进行</li></ol></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CheckerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"awesome-typescript-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/class.ts"</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"awesome-typescript-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              transpileOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">"./src/tpl/index.html"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CheckerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-4-Babel-7"><a href="#4-4-Babel-7" class="headerlink" title="4.4 Babel 7+"></a>4.4 Babel 7+</h2><pre class=" language-json"><code class="language-json">// package.json<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ts-babel-leaning"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"babel src --out-dir dist --extensions \".ts,.tsx\""</span><span class="token punctuation">,</span>    <span class="token property">"type-check"</span><span class="token operator">:</span> <span class="token string">"tsc --watch"</span> // 需要单独开启一个线程，执行ts类型检查  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@babel/cli"</span><span class="token operator">:</span> <span class="token string">"^7.8.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.8.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-class-properties"</span><span class="token operator">:</span> <span class="token string">"^7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-object-rest-spread"</span><span class="token operator">:</span> <span class="token string">"^7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.8.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-typescript"</span><span class="token operator">:</span> <span class="token string">"^7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">"^3.7.5"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-json"><code class="language-json">// tsconfig.json<span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span> // 与 Babel 混用时，此选项请开启  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-1-Babel-与-TypeScript-两者结合"><a href="#4-4-1-Babel-与-TypeScript-两者结合" class="headerlink" title="4.4.1 Babel 与 TypeScript 两者结合"></a>4.4.1 Babel 与 TypeScript 两者结合</h3><blockquote><p>Babel 只做语言转换<br>TypeScript 只做类型检查</p></blockquote><h3 id="4-4-2-在-Babel-中使用-TypeScript-的注意事项"><a href="#4-4-2-在-Babel-中使用-TypeScript-的注意事项" class="headerlink" title="4.4.2 在 Babel 中使用 TypeScript 的注意事项"></a>4.4.2 在 Babel 中使用 TypeScript 的注意事项</h3><ol><li>命名空间在 Babel 中编译会报错，不要使用</li><li>类型断言写法使用 as</li><li>常量枚举，编译报错</li><li>默认导出，编译报错</li></ol><h1 id="五、代码检查工具"><a href="#五、代码检查工具" class="headerlink" title="五、代码检查工具"></a>五、代码检查工具</h1><hr><h2 id="5-1-ESLint"><a href="#5-1-ESLint" class="headerlink" title="5.1 ESLint"></a>5.1 ESLint</h2><p><img src="https://i.loli.net/2020/06/26/Gp2QmlDX7uWIzKV.jpg" alt="ESLint.jpg"></p><p><img src="https://i.loli.net/2020/06/26/AagbK6kjqeBI9FV.jpg" alt="ESLint.jpg"></p><p><img src="https://i.loli.net/2020/06/26/HfmKGColOe4rAwJ.jpg" alt="ESLint.jpg"></p><h2 id="5-2-如何在-TypesSript-中使用-ESLint"><a href="#5-2-如何在-TypesSript-中使用-ESLint" class="headerlink" title="5.2 如何在 TypesSript 中使用 ESLint"></a>5.2 如何在 TypesSript 中使用 ESLint</h2><h3 id="5-2-1-安装-ESLint-模块"><a href="#5-2-1-安装-ESLint-模块" class="headerlink" title="5.2.1 安装 ESLint 模块"></a>5.2.1 安装 ESLint 模块</h3><h4 id="在-package-json-文件中"><a href="#在-package-json-文件中" class="headerlink" title="在 package.json 文件中"></a>在 package.json 文件中</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint src --ext .js,.ts"</span> // 检查 .js .ts 文件  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@typescript-eslint/eslint-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.19.0"</span><span class="token punctuation">,</span>    <span class="token property">"@typescript-eslint/parser"</span><span class="token operator">:</span> <span class="token string">"^2.19.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="在-eslintrc-json-文件中"><a href="#在-eslintrc-json-文件中" class="headerlink" title="在 .eslintrc.json 文件中"></a>在 .eslintrc.json 文件中</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@typescript-eslint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"project"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.json"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@typescript-eslint/no-inferrable-types"</span><span class="token operator">:</span> <span class="token string">"off"</span> // 关闭禁止显示的声明ts类型  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-2-安装-VSCode-ESLint-插件"><a href="#5-2-2-安装-VSCode-ESLint-插件" class="headerlink" title="5.2.2 安装 VSCode ESLint 插件"></a>5.2.2 安装 VSCode ESLint 插件</h3><h4 id="在-setting-json-文件中"><a href="#在-setting-json-文件中" class="headerlink" title="在 setting.json 文件中"></a>在 setting.json 文件中</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="5-3-babel-eslint-与-typescript-eslint"><a href="#5-3-babel-eslint-与-typescript-eslint" class="headerlink" title="5.3 babel-eslint 与 typescript-eslint"></a>5.3 babel-eslint 与 typescript-eslint</h2><ul><li>babel-eslint: 支持 TypeScript 没有的额外的语法检查，抛弃 TypeScript，不支持类型检查</li><li>typescript-eslint：基于 TypeScript 的 AST，支持创建基于类型信息的规则（tsconfig.json）</li></ul><p><strong>建议：</strong></p><ul><li>两者底层机制不一样，不要一起使用</li><li>Babel 体系建议使用 babel-eslint，否则就可以使用 typescript-eslint</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基础语法</title>
      <link href="/2020/06/ts/"/>
      <url>/2020/06/ts/</url>
      
        <content type="html"><![CDATA[<h1 id="一、开始一个项目"><a href="#一、开始一个项目" class="headerlink" title="一、开始一个项目"></a>一、开始一个项目</h1><h2 id="1-1-安装模块"><a href="#1-1-安装模块" class="headerlink" title="1.1 安装模块"></a>1.1 安装模块</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 初始化项目</span><span class="token function">npm</span> init -y<span class="token comment" spellcheck="true"># 全局安装 ts</span><span class="token function">npm</span> i -g typescript<span class="token comment" spellcheck="true"># 初始化ts配置文件</span>tsc --init<span class="token comment" spellcheck="true"># 安装 webpack</span><span class="token function">npm</span> i webpack webpack-cli webpack-dev-server -D<span class="token comment" spellcheck="true"># 安装 ts-loader 再次在当前项目中安装 typescript</span><span class="token function">npm</span> i ts-loader typescript -D<span class="token comment" spellcheck="true"># 安装  html-webpack-plugin 当使用 webpack打包时，创建一个 html 文件，并把 webpack 打包后的静态文件自动插入到这个 html 文件当中。</span><span class="token function">npm</span> <span class="token function">install</span> html-webpack-plugin -D<span class="token comment" spellcheck="true"># 安装 clean-webpack-plugin -D 可以帮助我们清空打包时产生的无用文件</span><span class="token function">npm</span> i clean-webpack-plugin -D<span class="token comment" spellcheck="true"># 安装 webpack-merge -D 可以帮助我们合并多个文件</span><span class="token function">npm</span> i webpack-merge -D</code></pre><h2 id="1-2-配置-package-json"><a href="#1-2-配置-package-json" class="headerlink" title="1.2 配置 package.json"></a>1.2 配置 package.json</h2><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --mode=development --config ./build/webpack.config.js"</span><span class="token punctuation">,</span> // 开发环境启动脚本  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --mode=product --config ./build/webpack.config.js"</span> // 构建生产环境脚本<span class="token punctuation">}</span></code></pre><h1 id="二、对比-TS-数据类型与-ES6-数据类型"><a href="#二、对比-TS-数据类型与-ES6-数据类型" class="headerlink" title="二、对比 TS 数据类型与 ES6 数据类型"></a>二、对比 TS 数据类型与 ES6 数据类型</h1><hr><table><thead><tr><th>ES6 的数据类型</th><th>TypeScript 的数据类型</th></tr></thead><tbody><tr><td>Boolean</td><td>Boolean</td></tr><tr><td>Number</td><td>Number</td></tr><tr><td>String</td><td>String</td></tr><tr><td>Array</td><td>Array</td></tr><tr><td>Function</td><td>Function</td></tr><tr><td>Object</td><td>Object</td></tr><tr><td>Symbol</td><td>Symbol</td></tr><tr><td>undefined</td><td>undefined</td></tr><tr><td>null</td><td>null</td></tr><tr><td></td><td><strong>void</strong></td></tr><tr><td></td><td><strong>any</strong></td></tr><tr><td></td><td><strong>never</strong></td></tr><tr><td></td><td><strong>元组</strong></td></tr><tr><td></td><td><strong>枚举</strong></td></tr><tr><td></td><td><strong>高级类型</strong></td></tr></tbody></table><h1 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h1><hr><h2 id="3-1-基本类型"><a href="#3-1-基本类型" class="headerlink" title="3.1 基本类型"></a>3.1 基本类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 原始类型</span><span class="token keyword">let</span> bool<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数组</span><span class="token keyword">let</span> arr1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只能存number</span><span class="token comment" spellcheck="true">// 泛型：联合类型 可以存 number 和 string</span><span class="token keyword">let</span> arr2<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元组 只能存放 两个类型一致的元素（实际开发中不建议使用）</span><span class="token keyword">let</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>tuple<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, "1", 2]</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：无法访问</span><span class="token comment" spellcheck="true">// 函数</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数定义</span><span class="token keyword">let</span> compute<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对象</span><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：不能分配属性</span><span class="token keyword">let</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token comment" spellcheck="true">// symbol</span><span class="token keyword">let</span> s1<span class="token punctuation">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fasle</span><span class="token comment" spellcheck="true">// undefined, null</span><span class="token keyword">let</span> un<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> empty<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>un <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许</span>empty <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许</span><span class="token comment" spellcheck="true">// void 避免 undefined值被污染</span><span class="token comment" spellcheck="true">// js中 undefined 可以被设置为一个指定的值</span><span class="token keyword">let</span> noReturn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// any</span><span class="token keyword">let</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// never</span><span class="token comment" spellcheck="true">// 永远不会返回</span><span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> endless <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="3-2-枚举类型"><a href="#3-2-枚举类型" class="headerlink" title="3.2 枚举类型"></a>3.2 枚举类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 数字枚举</span><span class="token keyword">enum</span> Role <span class="token punctuation">{</span>  Developer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Guest<span class="token punctuation">,</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Role<span class="token punctuation">.</span>Developer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { "Developer": 1, "Guest": 2, 1: "Developer", 2: "Guest"}</span>Role<span class="token punctuation">.</span>Guest <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：无法修改</span><span class="token comment" spellcheck="true">// 字符串枚举</span><span class="token keyword">enum</span> Message <span class="token punctuation">{</span>  Success <span class="token operator">=</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>  Fail <span class="token operator">=</span> <span class="token string">"失败"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 异构枚举（不建议使用）</span><span class="token keyword">enum</span> Answer <span class="token punctuation">{</span>  N <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Y <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 枚举成员</span><span class="token keyword">enum</span> Char <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> Char<span class="token punctuation">.</span>a<span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>  d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  e <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>  f<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//  ERROR：必须具有初始值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 常量枚举</span><span class="token comment" spellcheck="true">// 不需要枚举对象，而只需要使用枚举对象的值时候，可以使用</span><span class="token keyword">const</span> <span class="token keyword">enum</span> Month <span class="token punctuation">{</span>  Jan<span class="token punctuation">,</span>  Feb<span class="token punctuation">,</span>  Mar<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 枚举类型</span><span class="token keyword">enum</span> E <span class="token punctuation">{</span>  a<span class="token punctuation">,</span>  b<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> F <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> G <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token string">"banana"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> e<span class="token punctuation">:</span> E <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> f<span class="token punctuation">:</span> F <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>e <span class="token operator">===</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：不同枚举类型不可比较</span><span class="token keyword">let</span> e1<span class="token punctuation">:</span> E<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token keyword">let</span> e2<span class="token punctuation">:</span> E<span class="token punctuation">.</span>b<span class="token punctuation">;</span>e1 <span class="token operator">===</span> e2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：不同枚举类型不可比较</span><span class="token keyword">let</span> e3<span class="token punctuation">:</span> E<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>e1 <span class="token operator">===</span> e3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token keyword">let</span> g1<span class="token punctuation">:</span> G <span class="token operator">=</span> G<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token keyword">let</span> g2<span class="token punctuation">:</span> G<span class="token punctuation">.</span>a <span class="token operator">=</span> G<span class="token punctuation">.</span>a<span class="token punctuation">;</span></code></pre><h2 id="3-3-接口类型"><a href="#3-3-接口类型" class="headerlink" title="3.3 接口类型"></a>3.3 接口类型</h2><h3 id="3-3-1-对象类型接口"><a href="#3-3-1-对象类型接口" class="headerlink" title="3.3.1 对象类型接口"></a>3.3.1 对象类型接口</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义接口 List</span><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义接口 Result</span><span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>id<span class="token punctuation">,</span> value<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 增加的 sex 不会报错，符合鸭式变形法</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-1-1-鸭式变形法"><a href="#3-3-1-1-鸭式变形法" class="headerlink" title="3.3.1.1 鸭式变形法"></a>3.3.1.1 鸭式变形法</h4><blockquote><p>只要传入的数据格式满足接口定义的必要条件也是可以允许的。</p></blockquote><p>当然也有例外，请看下面：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：如果直接传入对象自变量，TS则会对额外的字段进行类型检查</span></code></pre><h4 id="3-3-1-2-有三种绕过方式"><a href="#3-3-1-2-有三种绕过方式" class="headerlink" title="3.3.1.2 有三种绕过方式"></a>3.3.1.2 有三种绕过方式</h4><ol><li>加类型断言</li><li>用变量传递</li><li>索引签名</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 方法1 加类型断言</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span> as Result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2 用变量传递</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法3 索引签名</span><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含义，用任意的字符串去索引 List，这样可以支持多个属性</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-1-3-假设有个新需求"><a href="#3-3-1-3-假设有个新需求" class="headerlink" title="3.3.1.3 假设有个新需求"></a>3.3.1.3 假设有个新需求</h4><blockquote><p>需要判断一个对象中是否有一个新字段（age），如果有则打印出来</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义接口 List</span><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>  readonly id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含义，只读，不可修改</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含义，可选属性，这个属性可以有也可以没有</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义接口 Result</span><span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>id<span class="token punctuation">,</span> value<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    value<span class="token punctuation">.</span>id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，不可修改</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-3-1-3-索引签名"><a href="#3-3-1-3-索引签名" class="headerlink" title="3.3.1.3 索引签名"></a>3.3.1.3 索引签名</h4><blockquote><p>我们可以明确的指定索引签名。例如：假设你想确认存储在对象中任何内容都符合  { message: string }  的结构，你可以通过  [index: string]: { message: string }  来实现。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">foo</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 储存的东西必须符合结构 ok</span>foo<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">"some message"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ERROR：必须包含 `message`</span>foo<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> abc<span class="token punctuation">:</span> <span class="token string">"some message"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>tip：</strong></p><blockquote><p>[index: string]: { message: string }; 里的  index 除了可读性外，并没有任何意义。例如：如果有一个用户名，你可以使用  { username: string}: { message: string }，这有利于下一个开发者理解你的代码。</p></blockquote><p>节选自：<a href="https://jkchao.github.io/typescript-book-chinese/typings/indexSignatures.html#typescript-%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D" target="_blank" rel="noopener">深入理解 TypeScript - 索引签名</a></p><h3 id="3-3-2-函数类型接口"><a href="#3-3-2-函数类型接口" class="headerlink" title="3.3.2 函数类型接口"></a>3.3.2 函数类型接口</h3><h4 id="3-3-2-1-声明"><a href="#3-3-2-1-声明" class="headerlink" title="3.3.2.1 声明"></a>3.3.2.1 声明</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 声明函数的四种方式</span><span class="token comment" spellcheck="true">// 函数定义</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 变量定义函数类型</span><span class="token keyword">let</span> add<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接口定义函数类型</span><span class="token keyword">interface</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类型别名定义函数类型</span>type Add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义</span><span class="token keyword">let</span> add<span class="token punctuation">:</span> Add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></code></pre><h4 id="3-3-2-2-可选参数"><a href="#3-3-2-2-可选参数" class="headerlink" title="3.3.2.2 可选参数"></a>3.3.2.2 可选参数</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token punctuation">:</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// ERROR：必选参数不能位于可选参数之后</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token punctuation">:</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-2-3-默认值"><a href="#3-3-2-3-默认值" class="headerlink" title="3.3.2.3 默认值"></a>3.3.2.3 默认值</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y <span class="token operator">+</span> x <span class="token operator">+</span> z <span class="token operator">+</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h4 id="3-3-2-4-剩余参数"><a href="#3-3-2-4-剩余参数" class="headerlink" title="3.3.2.4 剩余参数"></a>3.3.2.4 剩余参数</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    x <span class="token operator">+</span>    rest<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span></code></pre><h4 id="3-3-2-5-函数重载"><a href="#3-3-2-5-函数重载" class="headerlink" title="3.3.2.5 函数重载"></a>3.3.2.5 函数重载</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> rest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> first <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> first <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> rest<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "abc"</span></code></pre><h2 id="3-4-类"><a href="#3-4-类" class="headerlink" title="3.4 类"></a>3.4 类</h2><h3 id="3-4-1-基本知识"><a href="#3-4-1-基本知识" class="headerlink" title="3.4.1 基本知识"></a>3.4.1 基本知识</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须在构造函数中被初始化，默认 public</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">pri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  readonly legs<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只读，必须给初始值</span>  <span class="token keyword">static</span> food<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"bones"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只能通过类名调用</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例化 Dog</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"wangwang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">pri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：无法调用私有属性</span>dog<span class="token punctuation">.</span><span class="token function">pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR: 无法调用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'bones'</span><span class="token keyword">class</span> <span class="token class-name">Husky</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须加上</span>    <span class="token comment" spellcheck="true">// this 必须在 super 之后调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：无法调用私有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>  <span class="token punctuation">}</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认 public</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Husky<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'bones'</span></code></pre><blockquote><p>构造函数设置为 protected，说明这个类只能被继承，而不能被实例化。<br>构造函数设置为 private，说明这个类不能被继承，不能被实例化。</p></blockquote><h3 id="3-4-2-抽象类——多态特性"><a href="#3-4-2-抽象类——多态特性" class="headerlink" title="3.4.2 抽象类——多态特性"></a>3.4.2 抽象类——多态特性</h3><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  abstract <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// let animal = new Animal(); // Error：无法实例化</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dog sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cat sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"wangcai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"dema"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> animals<span class="token punctuation">:</span> Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>dog<span class="token punctuation">,</span> cat<span class="token punctuation">]</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  i<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * dog sleep   * cat sleep   */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-3-链式调用"><a href="#3-4-3-链式调用" class="headerlink" title="3.4.3 链式调用"></a>3.4.3 链式调用</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">WorkFlow</span> <span class="token punctuation">{</span>  <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">WorkFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token keyword">class</span> <span class="token class-name">MyFlow</span> <span class="token keyword">extends</span> <span class="token class-name">WorkFlow</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">MyFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span></code></pre><h2 id="3-5-类与接口的关系"><a href="#3-5-类与接口的关系" class="headerlink" title="3.5 类与接口的关系"></a>3.5 类与接口的关系</h2><p><img src="https://i.loli.net/2020/06/26/doJnDwsM3qIr7O1.jpg" alt="类与接口的关系.jpg"></p><h3 id="3-5-1-接口只能约束类的公有成员"><a href="#3-5-1-接口只能约束类的公有成员" class="headerlink" title="3.5.1 接口只能约束类的公有成员"></a>3.5.1 接口只能约束类的公有成员</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Asian</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 必须实现</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 必须实现</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-2-一个类类型接口可以继承多个接口"><a href="#3-5-2-一个类类型接口可以继承多个接口" class="headerlink" title="3.5.2 一个类类型接口可以继承多个接口"></a>3.5.2 一个类类型接口可以继承多个接口</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Child</span> <span class="token punctuation">{</span>  <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Man</span><span class="token punctuation">,</span> Child <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> boy<span class="token punctuation">:</span> Boy <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-5-3-接口继承类"><a href="#3-5-3-接口继承类" class="headerlink" title="3.5.3 接口继承类"></a>3.5.3 接口继承类</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Auto</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">AutoInterface</span> <span class="token keyword">extends</span> <span class="token class-name">Auto</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">AutoInterface</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h1><hr><h2 id="4-1-泛型函数与泛型接口"><a href="#4-1-泛型函数与泛型接口" class="headerlink" title="4.1 泛型函数与泛型接口"></a>4.1 泛型函数与泛型接口</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型函数</span><span class="token keyword">function</span> log<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>log<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类型定义</span>type Log <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 泛型接口定义</span><span class="token keyword">interface</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4-2-泛型类与泛型约束"><a href="#4-2-泛型类与泛型约束" class="headerlink" title="4.2 泛型类与泛型约束"></a>4.2 泛型类与泛型约束</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型类</span><span class="token keyword">class</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定number类型</span><span class="token keyword">let</span> log1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定string类型</span><span class="token keyword">let</span> log2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不指定类型</span><span class="token keyword">let</span> log2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">Length</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承Length，只能传入有length的属性的值</span><span class="token keyword">function</span> log<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Length</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-3-泛型的好处"><a href="#4-3-泛型的好处" class="headerlink" title="4.3 泛型的好处"></a>4.3 泛型的好处</h2><ol><li>函数和类可以轻松地支持多种类型，增强程序的拓展性</li><li>不必写多条函数重载，冗长的联合类型声明，增强代码可读性</li><li>灵活控制类型之前的约束</li></ol><h1 id="五、类型检查机制"><a href="#五、类型检查机制" class="headerlink" title="五、类型检查机制"></a>五、类型检查机制</h1><hr><h2 id="5-1-自动类型推断"><a href="#5-1-自动类型推断" class="headerlink" title="5.1 自动类型推断"></a>5.1 自动类型推断</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推断a为number</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推断 b 为 []any</span></code></pre><h2 id="5-2-类型兼容性"><a href="#5-2-类型兼容性" class="headerlink" title="5.2 类型兼容性"></a>5.2 类型兼容性</h2><h5 id="当一个类型-Y-可以被赋值给另一个类型-X-时，我们就可以说类型-X-兼容类型-Y-X-兼容-Y-X-目标类型-Y（源类型）"><a href="#当一个类型-Y-可以被赋值给另一个类型-X-时，我们就可以说类型-X-兼容类型-Y-X-兼容-Y-X-目标类型-Y（源类型）" class="headerlink" title="当一个类型 Y 可以被赋值给另一个类型 X 时，我们就可以说类型 X 兼容类型 Y X 兼容 Y : X (目标类型) = Y（源类型）"></a>当一个类型 Y 可以被赋值给另一个类型 X 时，我们就可以说类型 X 兼容类型 Y X 兼容 Y : X (目标类型) = Y（源类型）</h5><h5 id="口诀："><a href="#口诀：" class="headerlink" title="口诀："></a>口诀：</h5><ol><li>结构之间兼容：成员少的兼容成员多的</li><li>函数之间兼容：参数多的兼容参数少的</li></ol><h3 id="5-2-1-变量兼容性"><a href="#5-2-1-变量兼容性" class="headerlink" title="5.2.1 变量兼容性"></a>5.2.1 变量兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-2-接口兼容性"><a href="#5-2-2-接口兼容性" class="headerlink" title="5.2.2 接口兼容性"></a>5.2.2 接口兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 接口兼容性</span><span class="token keyword">interface</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Y</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  c<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> X <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token punctuation">:</span> Y <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token comment" spellcheck="true">// y = x; // Error 不兼容</span></code></pre><blockquote><p>结论：属性少的兼容属性多的</p></blockquote><h3 id="5-2-3-函数兼容性"><a href="#5-2-3-函数兼容性" class="headerlink" title="5.2.3 函数兼容性"></a>5.2.3 函数兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/**  * 结论：参数多的兼容参数少的  */</span><span class="token comment" spellcheck="true">// 函数兼容性</span>type Handler <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token keyword">function</span> <span class="token function">hor</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> handler<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1. 参数个数</span><span class="token keyword">let</span> handler1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">hor</span><span class="token punctuation">(</span>hander1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> handler2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hor(handler2); // Error 超出形参个数</span><span class="token comment" spellcheck="true">// 2. 可选参数和剩余参数</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> p2<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>a <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// b = c; // Error</span><span class="token comment" spellcheck="true">// b = a; // Error</span><span class="token comment" spellcheck="true">// 通过修改 tsconfig.json >> "strictFunctionTypes": false</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// 3. 参数类型</span><span class="token keyword">let</span> handler3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hor(handler3); // Error 类型不匹配</span><span class="token keyword">interface</span> <span class="token class-name">Point2D</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3D</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p2d <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">:</span> Point2D<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3d <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">:</span> Point3D<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>p3d <span class="token operator">=</span> p2d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token comment" spellcheck="true">// p2d = p3d: // Error</span><span class="token comment" spellcheck="true">// 通过修改 tsconfig.json >> "strictFunctionTypes": false</span>p2d <span class="token operator">=</span> p3d<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// 4. 返回值类型</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f <span class="token operator">=</span> g<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// g = f; // Error 不满足</span><span class="token comment" spellcheck="true">// 函数重载兼容</span><span class="token keyword">function</span> <span class="token function">overload</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">overload</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">overload</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-4-枚举兼容性"><a href="#5-2-4-枚举兼容性" class="headerlink" title="5.2.4 枚举兼容性"></a>5.2.4 枚举兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 枚举兼容性</span><span class="token keyword">enum</span> Fruit <span class="token punctuation">{</span>  Apple<span class="token punctuation">,</span>  Banana<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span>  Yellow<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> fruit<span class="token punctuation">:</span> Fruit<span class="token punctuation">.</span>Apple <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> no<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> Fruit<span class="token punctuation">.</span>Apple<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// let color: Color.Red = Fruit.Apple; // Error 不兼容</span></code></pre><h3 id="5-2-5-类兼容性"><a href="#5-2-5-类兼容性" class="headerlink" title="5.2.5 类兼容性"></a>5.2.5 类兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 类兼容性</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">let</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aa <span class="token operator">=</span> bb<span class="token punctuation">;</span>bb <span class="token operator">=</span> aa<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/**  * 类中含有私有成员，互相不兼容  */</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">let</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aa = bb; // Error</span><span class="token comment" spellcheck="true">// bb = aa; // Error</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aa <span class="token operator">=</span> cc<span class="token punctuation">;</span>cc <span class="token operator">=</span> aa<span class="token punctuation">;</span></code></pre><h3 id="5-2-6-泛型兼容性"><a href="#5-2-6-泛型兼容性" class="headerlink" title="5.2.6 泛型兼容性"></a>5.2.6 泛型兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型接口</span><span class="token keyword">interface</span> <span class="token class-name">Empty</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1<span class="token punctuation">:</span> Empty<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token punctuation">:</span> Empty<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// obj1 = obj2; // Error</span><span class="token comment" spellcheck="true">// 泛型函数</span><span class="token keyword">let</span> log1 <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> log2 <span class="token operator">=</span> <span class="token operator">&lt;</span>U<span class="token operator">></span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> U<span class="token punctuation">)</span><span class="token punctuation">:</span> U <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>log1 <span class="token operator">=</span> log2<span class="token punctuation">;</span></code></pre><h2 id="5-3-类型保护机制"><a href="#5-3-类型保护机制" class="headerlink" title="5.3 类型保护机制"></a>5.3 类型保护机制</h2><p>TypeScript 能够在特定的区块中保证变量属于某种确定的类型。<br>可以在此区块中放心地引用此类型的属性，或调用此类型的方法。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Type <span class="token punctuation">{</span> Strong<span class="token punctuation">,</span> Week <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token punctuation">{</span>    <span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    java<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">JavaScript</span> <span class="token punctuation">{</span>    <span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    javascript<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 4. 类型保护函数</span> <span class="token comment" spellcheck="true">// 返回值类型 => “lang is Java” 叫做：类型谓词</span> <span class="token keyword">function</span> <span class="token function">isJava</span><span class="token punctuation">(</span>lang<span class="token punctuation">:</span> Java <span class="token operator">|</span> JavaScript<span class="token punctuation">)</span><span class="token punctuation">:</span> lang is Java <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>lang as Java<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJava <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">getLanguage</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> lang <span class="token operator">=</span> type <span class="token operator">===</span> Type<span class="token punctuation">.</span>Strong <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Java</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">JavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处无法满足需要</span>    <span class="token comment" spellcheck="true">// if (lang.helloJava) {</span>    <span class="token comment" spellcheck="true">//    lang.helloJava();</span>    <span class="token comment" spellcheck="true">// } else (lang.helloJavaScript) {</span>    <span class="token comment" spellcheck="true">//    lang.helloJavaScript();</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 制造一个区块</span>    <span class="token comment" spellcheck="true">// 1. instanceof 关键字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token keyword">instanceof</span> <span class="token class-name">Java</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. in 关键字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'java'</span> <span class="token keyword">in</span> lang<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. typeof 关键字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 类型保护函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJava</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lang <span class="token punctuation">}</span> <span class="token function">getLanguage</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>Strong<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="六、高级类型"><a href="#六、高级类型" class="headerlink" title="六、高级类型"></a>六、高级类型</h1><hr><h2 id="6-1-交叉类型与联合类型"><a href="#6-1-交叉类型与联合类型" class="headerlink" title="6.1 交叉类型与联合类型"></a>6.1 交叉类型与联合类型</h2><p>交叉类型：适合做对象混入<br>联合类型：类型具有不确定性，增强代码的灵活性</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">DogInterface</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">CatInterface</span> <span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> pet<span class="token punctuation">:</span> DogInterface <span class="token operator">&amp;</span> CatInterface <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// 取值只能在 a,b,c 中</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">DogInterface</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">CatInterface</span> <span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Master <span class="token punctuation">{</span>  Boy<span class="token punctuation">,</span>  Girl<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPet</span><span class="token punctuation">(</span>master<span class="token punctuation">:</span> Master<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pet <span class="token operator">=</span> master <span class="token operator">===</span> Master<span class="token punctuation">.</span>Boy <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pet<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// pet.run(); // Error</span>  <span class="token comment" spellcheck="true">// pet.jump(); // Error</span>  <span class="token keyword">return</span> pet<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> <span class="token string">"square"</span><span class="token punctuation">;</span>  size<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> <span class="token string">"rectangle"</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> <span class="token string">"circle"</span><span class="token punctuation">;</span>  r<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type Shape <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"square"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"rectangle"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> s<span class="token punctuation">.</span>width <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> s<span class="token punctuation">.</span>r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> never<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-2-索引类型"><a href="#6-2-索引类型" class="headerlink" title="6.2 索引类型"></a>6.2 索引类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> value<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1, 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined, undefined</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 如何约束数组的元素</span><span class="token comment" spellcheck="true">// 下面来改造以下函数</span><span class="token keyword">function</span> getValues<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> K<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// console.log(getValues(obj, ['e', 'f'])); // Error</span></code></pre><h2 id="6-3-映射类型"><a href="#6-3-映射类型" class="headerlink" title="6.3 映射类型"></a>6.3 映射类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  c<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type ReadonlyObj <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Obj<span class="token operator">></span><span class="token punctuation">;</span>type PartialObj <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Obj<span class="token operator">></span><span class="token punctuation">;</span>type PickObj <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span><span class="token operator">></span><span class="token punctuation">;</span>type RecordObj <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">"x"</span> <span class="token operator">|</span> <span class="token string">"y"</span><span class="token punctuation">,</span> Obj<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="6-4-条件类型"><a href="#6-4-条件类型" class="headerlink" title="6.4 条件类型"></a>6.4 条件类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// T extends U ? X : Y</span>type TypeName<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">string</span>  <span class="token operator">?</span> <span class="token string">"string"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">number</span>  <span class="token operator">?</span> <span class="token string">"number"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">boolean</span>  <span class="token operator">?</span> <span class="token string">"boolean"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">undefined</span>  <span class="token operator">?</span> <span class="token string">"undefined"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">Function</span>  <span class="token operator">?</span> <span class="token string">"function"</span>  <span class="token punctuation">:</span> <span class="token string">"object"</span><span class="token punctuation">;</span>type T1 <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T1类型是 string</span>type T2 <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T1类型是 object</span><span class="token comment" spellcheck="true">// ( A | B ) extends U ? X : Y</span><span class="token comment" spellcheck="true">// ( A extends U ? X : Y ) | ( B extends U ? X : Y )</span>type T3 <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>type Diff<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span>type T4 <span class="token operator">=</span> Diff<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"e"</span><span class="token operator">></span><span class="token punctuation">;</span>type NotNull<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> undefined <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span>type T5 <span class="token operator">=</span> NotNull<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> undefined <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 官方预置的：</span><span class="token comment" spellcheck="true">// Exclude&lt;T, U></span><span class="token comment" spellcheck="true">// NonNullable&lt;T></span><span class="token comment" spellcheck="true">// Extract&lt;T, U></span>type Y7 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> stringn<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h1 id="七、ES6-与-CommonJS-的模块系统"><a href="#七、ES6-与-CommonJS-的模块系统" class="headerlink" title="七、ES6 与 CommonJS 的模块系统"></a>七、ES6 与 CommonJS 的模块系统</h1><hr><h2 id="7-1-两种模式不要混用"><a href="#7-1-两种模式不要混用" class="headerlink" title="7.1 两种模式不要混用"></a>7.1 两种模式不要混用</h2><ol><li>ES6</li><li>CommonJS</li></ol><h1 id="八、命名空间"><a href="#八、命名空间" class="headerlink" title="八、命名空间"></a>八、命名空间</h1><hr><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// a.ts</span>namespace Shape <span class="token punctuation">{</span>  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cricle</span><span class="token punctuation">(</span>r<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b.ts</span><span class="token comment" spellcheck="true">/** * 下面是三斜线指令 * 在 b.ts 调用 a.ts 的 cricle 方法 必须加上此指令 */</span><span class="token comment" spellcheck="true">/// &lt;reference path="a.ts" /></span>namespace Shape <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12.56 共享命名空间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// underfined 命名空间内的属性必须导出才能访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4  共享命名空间</span><span class="token comment" spellcheck="true">/** * 为了使得写法更加简便 * 可以使用此写法 * 此写法和模块没有关系 */</span><span class="token keyword">import</span> cricle <span class="token operator">=</span> Shape<span class="token punctuation">.</span>cricle<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span></code></pre><h1 id="九、声明合并"><a href="#九、声明合并" class="headerlink" title="九、声明合并"></a>九、声明合并</h1><hr><h2 id="9-1-接口合并"><a href="#9-1-接口合并" class="headerlink" title="9.1 接口合并"></a>9.1 接口合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * 后申明的接口顺序靠前，接口内部函数先声明的靠前 * 函数参数类型为字面量时，优先级最高 */</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// y: string; // Error</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 5</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 2</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 3</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 4</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这个变量必须具备这两个接口的所有成员</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数重载</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="9-2-函数与命名空间合并"><a href="#9-2-函数与命名空间合并" class="headerlink" title="9.2 函数与命名空间合并"></a>9.2 函数与命名空间合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Lib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>namespace Lib <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lib<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.0</span></code></pre><h2 id="9-3-类与命名空间合并"><a href="#9-3-类与命名空间合并" class="headerlink" title="9.3 类与命名空间合并"></a>9.3 类与命名空间合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>namespace C <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h2 id="9-4-枚举与命名空间合并"><a href="#9-4-枚举与命名空间合并" class="headerlink" title="9.4 枚举与命名空间合并"></a>9.4 枚举与命名空间合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span>  Yellow<span class="token punctuation">,</span>  Bule<span class="token punctuation">,</span><span class="token punctuation">}</span>namespace Color <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * { *     0: "Red", *     1: "Yellow", *     2: "Bule", *     "Red": 0, *     "Yellow": 1, *     "Blue": 2, *     "mix": f mix () * } */</span></code></pre><h1 id="十、如何编写声明文件"><a href="#十、如何编写声明文件" class="headerlink" title="十、如何编写声明文件"></a>十、如何编写声明文件</h1><hr><p>引入第三方类库并为它们编写声明文件<br>类库分为三种：</p><ol><li>全局类库</li><li>模块类库</li><li>umd 类库</li></ol><h1 id="十一、引入-jQuery"><a href="#十一、引入-jQuery" class="headerlink" title="十一、引入 jQuery"></a>十一、引入 jQuery</h1><hr><h2 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h2><pre class=" language-cmd"><code class="language-cmd">npm i jquerynpm i @types/jquery -D</code></pre><p>大多数类库都会提供声明文件<br>可以上 <a href="microsoft.github.io/TypeSearch">TypeSearch</a> 去查找社区有没有为类库提供声明文件</p><h2 id="11-2-使用"><a href="#11-2-使用" class="headerlink" title="11.2 使用"></a>11.2 使用</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">"jquery"</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="十二、如何自己编写一个声明文件"><a href="#十二、如何自己编写一个声明文件" class="headerlink" title="十二、如何自己编写一个声明文件"></a>十二、如何自己编写一个声明文件</h1><hr><blockquote><p>可以参考此网站 <a href="definitelytyped.org/guides/contributing.html">Definitely Typed</a></p></blockquote><h2 id="12-1-全局库"><a href="#12-1-全局库" class="headerlink" title="12.1 全局库"></a>12.1 全局库</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// global-lib.js</span><span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>globalLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span>globalLib<span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"global Lib do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// global-lib.d.js 声明文件</span><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> globalLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">declare</span> namespace globalLib <span class="token punctuation">{</span>  <span class="token keyword">const</span> version<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// example.ts 使用示范</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="12-2-模块库"><a href="#12-2-模块库" class="headerlink" title="12.2 模块库"></a>12.2 模块库</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// module-lib.js</span><span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>moduleLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span>moduleLib<span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"moduleLib Lib do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// module-lib.d.js 声明文件</span><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> globalLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">declare</span> namespace moduleLib <span class="token punctuation">{</span>  <span class="token keyword">const</span> version<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// example.ts 使用示范</span><span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">"./module-lib.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="12-3-umd-库"><a href="#12-3-umd-库" class="headerlink" title="12.3 umd 库"></a>12.3 umd 库</h2><h5 id="tsconfig-默认不允许-umd-使用全局引用方式，若如果想通过全局引用，则需要打开设置-“allowUmdGlobalAccess”-true"><a href="#tsconfig-默认不允许-umd-使用全局引用方式，若如果想通过全局引用，则需要打开设置-“allowUmdGlobalAccess”-true" class="headerlink" title="tsconfig 默认不允许 umd 使用全局引用方式，若如果想通过全局引用，则需要打开设置 “allowUmdGlobalAccess”: true"></a>tsconfig 默认不允许 umd 使用全局引用方式，若如果想通过全局引用，则需要打开设置 “allowUmdGlobalAccess”: true</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// umd-lib.js</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">module</span> <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">module</span><span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    root<span class="token punctuation">.</span>umdLib <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    version<span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"umdLib do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// umd-lib.d.js 声明文件</span><span class="token keyword">declare</span> namespace umdLib <span class="token punctuation">{</span>  <span class="token keyword">const</span> version<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> as namespace umdLib<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">=</span> umdLib<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// example.ts 使用示范</span><span class="token keyword">import</span> umdLib <span class="token keyword">from</span> <span class="token string">"./umd-lib.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>umdLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="12-4-给类库添加自定义方法"><a href="#12-4-给类库添加自定义方法" class="headerlink" title="12.4 给类库添加自定义方法"></a>12.4 给类库添加自定义方法</h2><blockquote><p>这里以 moment 为例</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> m <span class="token keyword">from</span> <span class="token string">"moment"</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"moment"</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span>m<span class="token punctuation">.</span>myFunction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="12-5-声明文件的依赖"><a href="#12-5-声明文件的依赖" class="headerlink" title="12.5 声明文件的依赖"></a>12.5 声明文件的依赖</h2><blockquote><p>这里以 jQuery 为例</p></blockquote><h6 id="node-modules-types-jquery-package-json"><a href="#node-modules-types-jquery-package-json" class="headerlink" title="/node_modules/@types/jquery/package.json"></a>/node_modules/@types/jquery/package.json</h6><pre class=" language-json"><code class="language-json"><span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"index"</span></code></pre><h6 id="node-modules-types-jquery-index-d-js"><a href="#node-modules-types-jquery-index-d-js" class="headerlink" title="/node_modules/@types/jquery/index.d.js"></a>/node_modules/@types/jquery/index.d.js</h6><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/// &lt;reference types="sizzle" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="jQueryStatic.d.ts" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="JQuery.d.ts" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="misc.d.ts" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="legacy.d.ts" /></span><span class="token keyword">export</span> <span class="token operator">=</span> jQuery<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
