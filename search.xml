<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript 工程配置</title>
      <link href="/typescript-gong-cheng-pei-zhi/"/>
      <url>/typescript-gong-cheng-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件选项配置"><a href="#1-文件选项配置" class="headerlink" title="1. 文件选项配置"></a>1. 文件选项配置</h1><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.base.json"</span><span class="token punctuation">,</span> // 继承其他配置文件 可以被覆盖  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/a.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译器需要编译的单个文件列表  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"src"</span><span class="token punctuation">,</span> // 编译器只编译src下的文件（包含子目录）    <span class="token string">"src/*"</span><span class="token punctuation">,</span> // 编译器只编译src一级目录下的文件    <span class="token string">"src/*/*"</span> // 编译器只编译src下二级目录下的文件  <span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译器需要编译的文件或目录（包含子目录）列表  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"src/lib"</span> // 只排除src/lib所有文件  <span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译器需要排除的文件或文件夹（默认排除node_module和其他声明文件）  <span class="token property">"compileOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span> // 保存时自动编译（vscode尚未支持 <span class="token number">2020.02</span>.<span class="token number">03</span>）<span class="token punctuation">}</span></code></pre><h1 id="2-编译选项配置"><a href="#2-编译选项配置" class="headerlink" title="2. 编译选项配置"></a>2. 编译选项配置</h1><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"incremental"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 增量编译，提高编译速度        <span class="token property">"tsBuildInfoFile"</span><span class="token operator">:</span> <span class="token string">"./buildFile"</span><span class="token punctuation">,</span> // 增量编译文件的存储位置        <span class="token property">"diagnostics"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 打印诊断信息        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span> // 目标语言的版本        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span> // 生成代码的模块标准        <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"./app.js"</span><span class="token punctuation">,</span> // 将多个互相依赖的文件生成一个文件，可以用在 AMD 模块中        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"es2019.array"</span><span class="token punctuation">,</span> // 导入此类库，可以使用高版本的语法        <span class="token punctuation">]</span><span class="token punctuation">,</span> // TS 需要引用的库，即声明文件，es5 默认 <span class="token string">"dom"</span><span class="token punctuation">,</span> <span class="token string">"es5"</span><span class="token punctuation">,</span> <span class="token string">"scripthost"</span>        <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许编译 JS 文件 （js、jsx）        <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许在 JS 文件中报错，通常与 allowJs 一起使用        <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./out"</span><span class="token punctuation">,</span><span class="token punctuation">,</span> // 指定输出目录        <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span> // 指定输入文件目录（用于输出）        <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成声明文件        <span class="token property">"declarationDir"</span><span class="token operator">:</span> <span class="token string">"./d"</span><span class="token punctuation">,</span> // 声明文件的路径        <span class="token property">"emitDeclarationOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 只生成声明文件        <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成目标文件的 sourceMap        <span class="token property">"inlineSourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成目标文件的 inline sourceMap        <span class="token property">"declarationMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 生成声明文件的 sourceMap        <span class="token property">"typeRoots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 声明文件目录，默认 node_module/@types        <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 只加载某个声明包文件列表        <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 删除注释        <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 不输出文件        <span class="token property">"noEmitOnError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 发生错误时，不输出文件        <span class="token property">"noEmitHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 不生成 helper 函数，需额外安装 ts-helpers        <span class="token property">"importHelps"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 通过 tslib 引入 helper 函数，文件必须是模块        <span class="token property">"downlevelIteration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 降级遍历器的实现（es3/<span class="token number">5</span>）        <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 开启所有严格的类型检查        <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 在代码中主入 <span class="token string">"use strict"</span>        <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 不允许隐式的 any 类型        <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 不允许把 <span class="token null">null</span>、undefined 赋值给其他类型变量        <span class="token property">"strictPropertyInitalization"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 类实例属性必须 初始化        <span class="token property">"strictBindCallAppy"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 严格的 bind/call/apply 检查        <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 不允许 this 有隐式的 any 类型        <span class="token property">"noUnuserLocals"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 检查只声明，未使用的局部变量        <span class="token property">"noUnusedParameters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> //  检查未使用的函数参数        <span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 防止 switch 语句贯穿        <span class="token property">"noImplicitReturns"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 每个分支都要有返回值        <span class="token property">"esMoudleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许 export = 导出，由 import from 导入        <span class="token property">"allowUmdGlobalAccess"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 允许在模块中放访问 UMD 全局变量        <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span> // 模块解析策略        <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span> // 解析非相对模块的基地址        <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules/jquery/dist/jquery.slim.min.js"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> // 为jquery指定一个精简的文件        <span class="token property">"rootDirs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 将多个目录放在一个虚拟目录下，用于运行时        <span class="token property">"listEmittedFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 打印输出文件        <span class="token property">"listFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 打印编译的文件（包括引用的声明文件）    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="3-工程引用"><a href="#3-工程引用" class="headerlink" title="3. 工程引用"></a>3. 工程引用</h1><p>场景：在一个代码仓库中，存放多个需要单独构建的工程。<br>例如一个全栈工程，有客户端和服务端，提取出共一些公用的代码，存放到一个公共文件夹下。</p><pre><code>├─src ----------------------------------------------- // 项目代码│ ├─client ---------------------------------------- // 客户端│           ├─index.ts ------------------------------ // 客户端示例文件│           └─tsconfig.json ------------------------- // 客户端配置文件│   ├─common ------------------------------------ // 公共│           ├─index.ts ------------------------------ // 公共示例文件│           └─tsconfig.json ------------------------- // 公共配置文件│   └─server --------------------------------------- // 服务端│           ├─index.ts ------------------------------ // 服务端示例文件│           └─tsconfig.json ------------------------- // 服务端配置文件├─test ---------------------------------------------- // 测试用例│           ├─client.test.ts -------------------------- // 客户端测试用例│           └─server.test.ts ------------------------- // 服务端测试用例│           └─tsconfig.json ------------------------- // 测试用例配置文件└─tsconfig.json ------------------------------------ // 整个项目的配置</code></pre><h3 id="整个项目的配置"><a href="#整个项目的配置" class="headerlink" title="整个项目的配置"></a>整个项目的配置</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"composit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> // 工程可以被引用，可以增量编译    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"../../tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"../../dist/client"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../common"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="服务端配置文件"><a href="#服务端配置文件" class="headerlink" title="服务端配置文件"></a>服务端配置文件</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"../../tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"../../dist/server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../common"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="测试用例配置文件"><a href="#测试用例配置文件" class="headerlink" title="测试用例配置文件"></a>测试用例配置文件</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"../tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../src/client"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../src/server"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><pre class=" language-shell"><code class="language-shell">tsc -b src/client --verbose // 构建客户端tsc -b src/server --verbose // 构建服务端tsc -b test --clean // 清空构建的文件</code></pre><h2 id="工程引用优点"><a href="#工程引用优点" class="headerlink" title="工程引用优点"></a>工程引用优点</h2><ul><li>解决输出目录结构的问题</li><li>解决了单个工程构建的问题</li><li>通过增量编译提高编译速度</li></ul><h1 id="4-编译工具"><a href="#4-编译工具" class="headerlink" title="4. 编译工具"></a>4. 编译工具</h1><p><strong>如何选择 TypeScript 编译工具</strong></p><ol><li>如果没有使用过 Babel，首选 TypeScript 自生的编译器（可配合 ts-loader 使用）</li><li>如果项目中已经使用了 Babel，安装 @bable/preset-typescript（可配合 tsc 做类型检查）</li><li>两种编译工具不要混用</li></ol><h2 id="ts-loader（推荐）"><a href="#ts-loader（推荐）" class="headerlink" title="ts-loader（推荐）"></a>ts-loader（推荐）</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.base.config.js</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ForkTsCheckerWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fork-ts-checker-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/class.ts"</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              transpileOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 为true时只做语言转换，不做类型检查（编译时无法发现错误，需要借助第三方插件：fork-ts-checker-webpack-plugin）</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">"./src/tpl/index.html"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ForkTsCheckerWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="awesome-typescript-loader（不推荐）"><a href="#awesome-typescript-loader（不推荐）" class="headerlink" title="awesome-typescript-loader（不推荐）"></a>awesome-typescript-loader（不推荐）</h2><p><strong>与 ts-loader 的主要区别：</strong></p><ol><li>更适合与 Babel 集成，使用 Babel 的转义和缓存</li><li>不需要安装额外的插件，就可以把类型检查放在独立进程中进行</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CheckerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"awesome-typescript-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/class.ts"</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"awesome-typescript-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              transpileOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">"./src/tpl/index.html"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CheckerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Babel-7"><a href="#Babel-7" class="headerlink" title="Babel 7+"></a>Babel 7+</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ts-babel-leaning"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"babel src --out-dir dist --extensions \".ts,.tsx\""</span><span class="token punctuation">,</span>    <span class="token property">"type-check"</span><span class="token operator">:</span> <span class="token string">"tsc --watch"</span> // 需要单独开启一个线程，执行ts类型检查  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@babel/cli"</span><span class="token operator">:</span> <span class="token string">"^7.8.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.8.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-class-properties"</span><span class="token operator">:</span> <span class="token string">"^7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-object-rest-spread"</span><span class="token operator">:</span> <span class="token string">"^7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.8.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-typescript"</span><span class="token operator">:</span> <span class="token string">"^7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">"^3.7.5"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span> // 与 Babel 混用时，此选项请开启  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Babel 与 TypeScript 两者结合</strong></p><ul><li>Babel 只做语言转换</li><li>TypeScript 只做类型检查</li></ul><p><strong>在 Babel 中使用 TypeScript 的注意事项</strong></p><ol><li>命名空间在 Babel 中编译会报错，不要使用</li><li>类型断言写法使用 as</li><li>常量枚举，编译报错</li><li>默认导出，编译报错</li></ol><h1 id="5-代码检查工具"><a href="#5-代码检查工具" class="headerlink" title="5. 代码检查工具"></a>5. 代码检查工具</h1><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><img src="https://i.loli.net/2020/06/26/Gp2QmlDX7uWIzKV.jpg" alt="ESLint.jpg"></p><p><img src="https://i.loli.net/2020/06/26/AagbK6kjqeBI9FV.jpg" alt="ESLint.jpg"></p><p><img src="https://i.loli.net/2020/06/26/HfmKGColOe4rAwJ.jpg" alt="ESLint.jpg"></p><h2 id="如何在-TypesSript-中使用-ESLint"><a href="#如何在-TypesSript-中使用-ESLint" class="headerlink" title="如何在 TypesSript 中使用 ESLint"></a>如何在 TypesSript 中使用 ESLint</h2><h3 id="package-json-1"><a href="#package-json-1" class="headerlink" title="package.json"></a>package.json</h3><p>需要安装这两个插件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint src --ext .js,.ts"</span> // 检查 .js .ts 文件  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@typescript-eslint/eslint-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.19.0"</span><span class="token punctuation">,</span>    <span class="token property">"@typescript-eslint/parser"</span><span class="token operator">:</span> <span class="token string">"^2.19.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="eslintrc-json"><a href="#eslintrc-json" class="headerlink" title=".eslintrc.json"></a>.eslintrc.json</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@typescript-eslint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"project"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.json"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@typescript-eslint/no-inferrable-types"</span><span class="token operator">:</span> <span class="token string">"off"</span> // 关闭禁止显示的声明ts类型  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="安装-VSCode-ESLint-插件"><a href="#安装-VSCode-ESLint-插件" class="headerlink" title="安装 VSCode ESLint 插件"></a>安装 VSCode ESLint 插件</h3><h4 id="setting-json"><a href="#setting-json" class="headerlink" title="setting.json"></a>setting.json</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="babel-eslint-与-typescript-eslint"><a href="#babel-eslint-与-typescript-eslint" class="headerlink" title="babel-eslint 与 typescript-eslint"></a>babel-eslint 与 typescript-eslint</h2><ul><li>babel-eslint: 支持 TypeScript 没有的额外的语法检查，抛弃 TypeScript，不支持类型检查</li><li>typescript-eslint：基于 TypeScript 的 AST，支持创建基于类型信息的规则（tsconfig.json）</li></ul><p><strong>建议：</strong></p><ul><li>两者底层机制不一样，不要一起使用</li><li>Babel 体系建议使用 babel-eslint，否则就可以使用 typescript-eslint</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基础语法</title>
      <link href="/typescript-ji-chu-yu-fa/"/>
      <url>/typescript-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="1-开始一个项目"><a href="#1-开始一个项目" class="headerlink" title="1. 开始一个项目"></a>1. 开始一个项目</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 初始化项目</span><span class="token function">npm</span> init -y<span class="token comment" spellcheck="true"># 全局安装 ts</span><span class="token function">npm</span> i -g typescript<span class="token comment" spellcheck="true"># 初始化ts配置文件</span>tsc --init<span class="token comment" spellcheck="true"># 安装 webpack</span><span class="token function">npm</span> i webpack webpack-cli webpack-dev-server -D<span class="token comment" spellcheck="true"># 安装 ts-loader 再次在当前项目中安装 typescript</span><span class="token function">npm</span> i ts-loader typescript -D<span class="token comment" spellcheck="true"># 安装  html-webpack-plugin 当使用 webpack打包时，创建一个 html 文件，并把 webpack 打包后的静态文件自动插入到这个 html 文件当中。</span><span class="token function">npm</span> <span class="token function">install</span> html-webpack-plugin -D<span class="token comment" spellcheck="true"># 安装 clean-webpack-plugin -D 可以帮助我们清空打包时产生的无用文件</span><span class="token function">npm</span> i clean-webpack-plugin -D<span class="token comment" spellcheck="true"># 安装 webpack-merge -D 可以帮助我们合并多个文件</span><span class="token function">npm</span> i webpack-merge -D</code></pre><h2 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h2><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --mode=development --config ./build/webpack.config.js"</span><span class="token punctuation">,</span> // 开发环境启动脚本    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --mode=product --config ./build/webpack.config.js"</span> // 构建生产环境脚本<span class="token punctuation">}</span></code></pre><h1 id="2-TS-基础类型"><a href="#2-TS-基础类型" class="headerlink" title="2. TS 基础类型"></a>2. TS 基础类型</h1><table><thead><tr><th>ES6 的数据类型</th><th>TypeScript 的数据类型</th></tr></thead><tbody><tr><td>Boolean</td><td>Boolean</td></tr><tr><td>Number</td><td>Number</td></tr><tr><td>String</td><td>String</td></tr><tr><td>Array</td><td>Array</td></tr><tr><td>Function</td><td>Function</td></tr><tr><td>Object</td><td>Object</td></tr><tr><td>Symbol</td><td>Symbol</td></tr><tr><td>undefined</td><td>undefined</td></tr><tr><td>null</td><td>null</td></tr><tr><td></td><td><strong>void</strong></td></tr><tr><td></td><td><strong>any</strong></td></tr><tr><td></td><td><strong>never</strong></td></tr><tr><td></td><td><strong>元组</strong></td></tr><tr><td></td><td><strong>枚举</strong></td></tr><tr><td></td><td><strong>高级类型</strong></td></tr></tbody></table><h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 原始类型</span><span class="token keyword">let</span> bool<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数组</span><span class="token keyword">let</span> arr1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只能存number</span><span class="token comment" spellcheck="true">// 泛型：联合类型 可以存 number 和 string</span><span class="token keyword">let</span> arr2<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元组 只能存放 两个类型一致的元素（实际开发中不建议使用）</span><span class="token keyword">let</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>tuple<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, "1", 2]</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：无法访问</span><span class="token comment" spellcheck="true">// 函数</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数定义</span><span class="token keyword">let</span> compute<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">(</span>compute <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对象</span><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：不能分配属性</span><span class="token keyword">let</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token comment" spellcheck="true">// symbol</span><span class="token keyword">let</span> s1<span class="token punctuation">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fasle</span><span class="token comment" spellcheck="true">// undefined, null</span><span class="token keyword">let</span> un<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> empty<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>un <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许</span>empty <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许</span><span class="token comment" spellcheck="true">// void 避免 undefined值被污染</span><span class="token comment" spellcheck="true">// js中 undefined 可以被设置为一个指定的值</span><span class="token keyword">let</span> noReturn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// any</span><span class="token keyword">let</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// never</span><span class="token comment" spellcheck="true">// 永远不会返回</span><span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> endless <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 数字枚举</span><span class="token keyword">enum</span> Role <span class="token punctuation">{</span>  Developer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Guest<span class="token punctuation">,</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Role<span class="token punctuation">.</span>Developer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Role<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { "Developer": 1, "Guest": 2, 1: "Developer", 2: "Guest"}</span>Role<span class="token punctuation">.</span>Guest <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：无法修改</span><span class="token comment" spellcheck="true">// 字符串枚举</span><span class="token keyword">enum</span> Message <span class="token punctuation">{</span>  Success <span class="token operator">=</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>  Fail <span class="token operator">=</span> <span class="token string">"失败"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 异构枚举（不建议使用）</span><span class="token keyword">enum</span> Answer <span class="token punctuation">{</span>  N <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Y <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 枚举成员</span><span class="token keyword">enum</span> Char <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> Char<span class="token punctuation">.</span>a<span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>  d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  e <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>  f<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//  ERROR：必须具有初始值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 常量枚举</span><span class="token comment" spellcheck="true">// 不需要枚举对象，而只需要使用枚举对象的值时候，可以使用</span><span class="token keyword">const</span> <span class="token keyword">enum</span> Month <span class="token punctuation">{</span>  Jan<span class="token punctuation">,</span>  Feb<span class="token punctuation">,</span>  Mar<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 枚举类型</span><span class="token keyword">enum</span> E <span class="token punctuation">{</span>  a<span class="token punctuation">,</span>  b<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> F <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> G <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token string">"banana"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> e<span class="token punctuation">:</span> E <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> f<span class="token punctuation">:</span> F <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>e <span class="token operator">===</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ERROR：不同枚举类型不可比较</span><span class="token keyword">let</span> e1<span class="token punctuation">:</span> E<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token keyword">let</span> e2<span class="token punctuation">:</span> E<span class="token punctuation">.</span>b<span class="token punctuation">;</span>e1 <span class="token operator">===</span> e2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：不同枚举类型不可比较</span><span class="token keyword">let</span> e3<span class="token punctuation">:</span> E<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>e1 <span class="token operator">===</span> e3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token keyword">let</span> g1<span class="token punctuation">:</span> G <span class="token operator">=</span> G<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token keyword">let</span> g2<span class="token punctuation">:</span> G<span class="token punctuation">.</span>a <span class="token operator">=</span> G<span class="token punctuation">.</span>a<span class="token punctuation">;</span></code></pre><h1 id="3-接口类型"><a href="#3-接口类型" class="headerlink" title="3. 接口类型"></a>3. 接口类型</h1><h2 id="对象类型接口"><a href="#对象类型接口" class="headerlink" title="对象类型接口"></a>对象类型接口</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义接口 List</span><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义接口 Result</span><span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>id<span class="token punctuation">,</span> value<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 增加的 sex 不会报错，符合鸭式变形法</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="鸭式变形法"><a href="#鸭式变形法" class="headerlink" title="鸭式变形法"></a>鸭式变形法</h3><blockquote><p>只要传入的数据格式满足接口定义的必要条件也是可以允许的。</p></blockquote><p>当然也有例外，请看下面：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：如果直接传入对象自变量，TS则会对额外的字段进行类型检查</span></code></pre><hr><h3 id="有三种绕过方式"><a href="#有三种绕过方式" class="headerlink" title="有三种绕过方式"></a>有三种绕过方式</h3><ol><li>加类型断言</li><li>用变量传递</li><li>索引签名</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 方法1 加类型断言</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span> as Result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2 用变量传递</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法3 索引签名</span><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含义，用任意的字符串去索引 List，这样可以支持多个属性</span><span class="token punctuation">}</span></code></pre><h3 id="假设有个新需求"><a href="#假设有个新需求" class="headerlink" title="假设有个新需求"></a>假设有个新需求</h3><blockquote><p>需要判断一个对象中是否有一个新字段（age），如果有则打印出来</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义接口 List</span><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>  readonly id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含义，只读，不可修改</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 含义，可选属性，这个属性可以有也可以没有</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义接口 Result</span><span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>id<span class="token punctuation">,</span> value<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    value<span class="token punctuation">.</span>id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，不可修改</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="索引签名"><a href="#索引签名" class="headerlink" title="索引签名"></a>索引签名</h3><blockquote><p>我们可以明确的指定索引签名。例如：假设你想确认存储在对象中任何内容都符合  { message: string }  的结构，你可以通过  [index: string]: { message: string }  来实现。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">foo</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 储存的东西必须符合结构 ok</span>foo<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">"some message"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ERROR：必须包含 `message`</span>foo<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> abc<span class="token punctuation">:</span> <span class="token string">"some message"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>tip：</strong></p><blockquote><p>[index: string]: { message: string }; 里的  index 除了可读性外，并没有任何意义。例如：如果有一个用户名，你可以使用  { username: string}: { message: string }，这有利于下一个开发者理解你的代码。</p></blockquote><p>节选自：<a href="https://jkchao.github.io/typescript-book-chinese/typings/indexSignatures.html#typescript-%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D" target="_blank" rel="noopener">深入理解 TypeScript - 索引签名</a></p><h2 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 声明函数的四种方式</span><span class="token comment" spellcheck="true">// 函数定义</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 变量定义函数类型</span><span class="token keyword">let</span> add<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接口定义函数类型</span><span class="token keyword">interface</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类型别名定义函数类型</span>type Add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义</span><span class="token keyword">let</span> add<span class="token punctuation">:</span> Add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></code></pre><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token punctuation">:</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// ERROR：必选参数不能位于可选参数之后</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token punctuation">:</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y <span class="token operator">+</span> x <span class="token operator">+</span> z <span class="token operator">+</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    x <span class="token operator">+</span>    rest<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span></code></pre><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> rest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> first <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> first <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> rest<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "abc"</span></code></pre><h1 id="4-类"><a href="#4-类" class="headerlink" title="4. 类"></a>4. 类</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须在构造函数中被初始化，默认 public</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">pri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  readonly legs<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只读，必须给初始值</span>  <span class="token keyword">static</span> food<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"bones"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只能通过类名调用</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例化 Dog</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"wangwang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">pri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：无法调用私有属性</span>dog<span class="token punctuation">.</span><span class="token function">pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR: 无法调用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'bones'</span><span class="token keyword">class</span> <span class="token class-name">Husky</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须加上</span>    <span class="token comment" spellcheck="true">// this 必须在 super 之后调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ERROR：无法调用私有属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>  <span class="token punctuation">}</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认 public</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Husky<span class="token punctuation">.</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'bones'</span></code></pre><blockquote><p>构造函数设置为 protected，说明这个类只能被继承，而不能被实例化。<br>构造函数设置为 private，说明这个类不能被继承，不能被实例化。</p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="多态特性"><a href="#多态特性" class="headerlink" title="多态特性"></a>多态特性</h3><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  abstract <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// let animal = new Animal(); // Error：无法实例化</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dog sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cat sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"wangcai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"dema"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> animals<span class="token punctuation">:</span> Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>dog<span class="token punctuation">,</span> cat<span class="token punctuation">]</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  i<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * dog sleep   * cat sleep   */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">WorkFlow</span> <span class="token punctuation">{</span>  <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">WorkFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token keyword">class</span> <span class="token class-name">MyFlow</span> <span class="token keyword">extends</span> <span class="token class-name">WorkFlow</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">MyFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span></code></pre><h2 id="类与接口的关系"><a href="#类与接口的关系" class="headerlink" title="类与接口的关系"></a>类与接口的关系</h2><p><img src="https://i.loli.net/2020/06/26/doJnDwsM3qIr7O1.jpg" alt="类与接口的关系.jpg"></p><h3 id="接口只能约束类的公有成员"><a href="#接口只能约束类的公有成员" class="headerlink" title="接口只能约束类的公有成员"></a>接口只能约束类的公有成员</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Asian</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 必须实现</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 必须实现</span><span class="token punctuation">}</span></code></pre><h3 id="一个类类型接口可以继承多个接口"><a href="#一个类类型接口可以继承多个接口" class="headerlink" title="一个类类型接口可以继承多个接口"></a>一个类类型接口可以继承多个接口</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Child</span> <span class="token punctuation">{</span>  <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Man</span><span class="token punctuation">,</span> Child <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> boy<span class="token punctuation">:</span> Boy <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Auto</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">AutoInterface</span> <span class="token keyword">extends</span> <span class="token class-name">Auto</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">AutoInterface</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5. 泛型"></a>5. 泛型</h1><h2 id="泛型函数与泛型接口"><a href="#泛型函数与泛型接口" class="headerlink" title="泛型函数与泛型接口"></a>泛型函数与泛型接口</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型函数</span><span class="token keyword">function</span> log<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>log<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类型定义</span>type Log <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 泛型接口定义</span><span class="token keyword">interface</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span>T <span class="token operator">=</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="泛型类与泛型约束"><a href="#泛型类与泛型约束" class="headerlink" title="泛型类与泛型约束"></a>泛型类与泛型约束</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型类</span><span class="token keyword">class</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定number类型</span><span class="token keyword">let</span> log1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定string类型</span><span class="token keyword">let</span> log2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不指定类型</span><span class="token keyword">let</span> log2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">Length</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承Length，只能传入有length的属性的值</span><span class="token keyword">function</span> log<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Length</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h2><ol><li>函数和类可以轻松地支持多种类型，增强程序的拓展性</li><li>不必写多条函数重载，冗长的联合类型声明，增强代码可读性</li><li>灵活控制类型之前的约束</li></ol><h1 id="6-类型检查机制"><a href="#6-类型检查机制" class="headerlink" title="6. 类型检查机制"></a>6. 类型检查机制</h1><h2 id="自动类型推断"><a href="#自动类型推断" class="headerlink" title="自动类型推断"></a>自动类型推断</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推断a为number</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推断 b 为 []any</span></code></pre><h2 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h2><p>当一个类型 Y 可以被赋值给另一个类型 X 时，我们就可以说类型 X 兼容类型 Y</p><p>X 兼容 Y : X (目标类型) = Y（源类型）</p><p>口诀：<br>结构之间兼容：成员少的兼容成员多的<br>函数之前兼容：参数多的兼容参数少的</p><h3 id="变量兼容性"><a href="#变量兼容性" class="headerlink" title="变量兼容性"></a>变量兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><h3 id="接口兼容性"><a href="#接口兼容性" class="headerlink" title="接口兼容性"></a>接口兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 接口兼容性</span><span class="token keyword">interface</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Y</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  c<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> X <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token punctuation">:</span> Y <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token comment" spellcheck="true">// y = x; // Error 不兼容</span></code></pre><p><strong>结论：属性少的兼容属性多的</strong></p><h3 id="函数兼容性"><a href="#函数兼容性" class="headerlink" title="函数兼容性"></a>函数兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/**  * 结论：参数多的兼容参数少的  */</span><span class="token comment" spellcheck="true">// 函数兼容性</span>type Handler <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token keyword">function</span> <span class="token function">hor</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> handler<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1. 参数个数</span><span class="token keyword">let</span> handler1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">hor</span><span class="token punctuation">(</span>hander1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> handler2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hor(handler2); // Error 超出形参个数</span><span class="token comment" spellcheck="true">// 2. 可选参数和剩余参数</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> p2<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>a <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// b = c; // Error</span><span class="token comment" spellcheck="true">// b = a; // Error</span><span class="token comment" spellcheck="true">// 通过修改 tsconfig.json >> "strictFunctionTypes": false</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// 3. 参数类型</span><span class="token keyword">let</span> handler3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hor(handler3); // Error 类型不匹配</span><span class="token keyword">interface</span> <span class="token class-name">Point2D</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3D</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p2d <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">:</span> Point2D<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3d <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">:</span> Point3D<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>p3d <span class="token operator">=</span> p2d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token comment" spellcheck="true">// p2d = p3d: // Error</span><span class="token comment" spellcheck="true">// 通过修改 tsconfig.json >> "strictFunctionTypes": false</span>p2d <span class="token operator">=</span> p3d<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// 4. 返回值类型</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f <span class="token operator">=</span> g<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// g = f; // Error 不满足</span><span class="token comment" spellcheck="true">// 函数重载兼容</span><span class="token keyword">function</span> <span class="token function">overload</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">overload</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">overload</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span></code></pre><h3 id="枚举兼容性"><a href="#枚举兼容性" class="headerlink" title="枚举兼容性"></a>枚举兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 枚举兼容性</span><span class="token keyword">enum</span> Fruit <span class="token punctuation">{</span>  Apple<span class="token punctuation">,</span>  Banana<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span>  Yellow<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> fruit<span class="token punctuation">:</span> Fruit<span class="token punctuation">.</span>Apple <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> no<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> Fruit<span class="token punctuation">.</span>Apple<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// let color: Color.Red = Fruit.Apple; // Error 不兼容</span></code></pre><h3 id="类兼容性"><a href="#类兼容性" class="headerlink" title="类兼容性"></a>类兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 类兼容性</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">let</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aa <span class="token operator">=</span> bb<span class="token punctuation">;</span>bb <span class="token operator">=</span> aa<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/**  * 类中含有私有成员，互相不兼容  */</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">let</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aa = bb; // Error</span><span class="token comment" spellcheck="true">// bb = aa; // Error</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aa <span class="token operator">=</span> cc<span class="token punctuation">;</span>cc <span class="token operator">=</span> aa<span class="token punctuation">;</span></code></pre><h3 id="泛型兼容性"><a href="#泛型兼容性" class="headerlink" title="泛型兼容性"></a>泛型兼容性</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型接口</span><span class="token keyword">interface</span> <span class="token class-name">Empty</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1<span class="token punctuation">:</span> Empty<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token punctuation">:</span> Empty<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// obj1 = obj2; // Error</span><span class="token comment" spellcheck="true">// 泛型函数</span><span class="token keyword">let</span> log1 <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> log2 <span class="token operator">=</span> <span class="token operator">&lt;</span>U<span class="token operator">></span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> U<span class="token punctuation">)</span><span class="token punctuation">:</span> U <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>log1 <span class="token operator">=</span> log2<span class="token punctuation">;</span></code></pre><h2 id="类型保护机制"><a href="#类型保护机制" class="headerlink" title="类型保护机制"></a>类型保护机制</h2><p>TypeScript 能够在特定的区块中保证变量属于某种确定的类型。<br>可以在此区块中放心地引用此类型的属性，或调用此类型的方法。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Type <span class="token punctuation">{</span> Strong<span class="token punctuation">,</span> Week <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token punctuation">{</span>    <span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello java'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    java<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">JavaScript</span> <span class="token punctuation">{</span>    <span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    javascript<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 4. 类型保护函数</span> <span class="token comment" spellcheck="true">// 返回值类型 => “lang is Java” 叫做：类型谓词</span> <span class="token keyword">function</span> <span class="token function">isJava</span><span class="token punctuation">(</span>lang<span class="token punctuation">:</span> Java <span class="token operator">|</span> JavaScript<span class="token punctuation">)</span><span class="token punctuation">:</span> lang is Java <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>lang as Java<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJava <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">getLanguage</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> lang <span class="token operator">=</span> type <span class="token operator">===</span> Type<span class="token punctuation">.</span>Strong <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Java</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">JavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处无法满足需要</span>    <span class="token comment" spellcheck="true">// if (lang.helloJava) {</span>    <span class="token comment" spellcheck="true">//    lang.helloJava();</span>    <span class="token comment" spellcheck="true">// } else (lang.helloJavaScript) {</span>    <span class="token comment" spellcheck="true">//    lang.helloJavaScript();</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 制造一个区块</span>    <span class="token comment" spellcheck="true">// 1. instanceof 关键字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token keyword">instanceof</span> <span class="token class-name">Java</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. in 关键字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'java'</span> <span class="token keyword">in</span> lang<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. typeof 关键字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 类型保护函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJava</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lang <span class="token punctuation">}</span> <span class="token function">getLanguage</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>Strong<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="7-高级类型"><a href="#7-高级类型" class="headerlink" title="7. 高级类型"></a>7. 高级类型</h1><h2 id="交叉类型与联合类型"><a href="#交叉类型与联合类型" class="headerlink" title="交叉类型与联合类型"></a>交叉类型与联合类型</h2><p>交叉类型：适合做对象混入<br>联合类型：类型具有不确定性，增强代码的灵活性</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">DogInterface</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">CatInterface</span> <span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> pet<span class="token punctuation">:</span> DogInterface <span class="token operator">&amp;</span> CatInterface <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// 取值只能在 a,b,c 中</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">DogInterface</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">CatInterface</span> <span class="token punctuation">{</span>  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Master <span class="token punctuation">{</span>  Boy<span class="token punctuation">,</span>  Girl<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPet</span><span class="token punctuation">(</span>master<span class="token punctuation">:</span> Master<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pet <span class="token operator">=</span> master <span class="token operator">===</span> Master<span class="token punctuation">.</span>Boy <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pet<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// pet.run(); // Error</span>  <span class="token comment" spellcheck="true">// pet.jump(); // Error</span>  <span class="token keyword">return</span> pet<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> <span class="token string">"square"</span><span class="token punctuation">;</span>  size<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> <span class="token string">"rectangle"</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> <span class="token string">"circle"</span><span class="token punctuation">;</span>  r<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type Shape <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"square"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"rectangle"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> s<span class="token punctuation">.</span>width <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> s<span class="token punctuation">.</span>r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> never<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> value<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1, 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined, undefined</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 如何约束数组的元素</span><span class="token comment" spellcheck="true">// 下面来改造以下函数</span><span class="token keyword">function</span> getValues<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> K<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// console.log(getValues(obj, ['e', 'f'])); // Error</span></code></pre><h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  c<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type ReadonlyObj <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Obj<span class="token operator">></span><span class="token punctuation">;</span>type PartialObj <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Obj<span class="token operator">></span><span class="token punctuation">;</span>type PickObj <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span><span class="token operator">></span><span class="token punctuation">;</span>type RecordObj <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">"x"</span> <span class="token operator">|</span> <span class="token string">"y"</span><span class="token punctuation">,</span> Obj<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// T extends U ? X : Y</span>type TypeName<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">string</span>  <span class="token operator">?</span> <span class="token string">"string"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">number</span>  <span class="token operator">?</span> <span class="token string">"number"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">boolean</span>  <span class="token operator">?</span> <span class="token string">"boolean"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">undefined</span>  <span class="token operator">?</span> <span class="token string">"undefined"</span>  <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token class-name">Function</span>  <span class="token operator">?</span> <span class="token string">"function"</span>  <span class="token punctuation">:</span> <span class="token string">"object"</span><span class="token punctuation">;</span>type T1 <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T1类型是 string</span>type T2 <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T1类型是 object</span><span class="token comment" spellcheck="true">// ( A | B ) extends U ? X : Y</span><span class="token comment" spellcheck="true">// ( A extends U ? X : Y ) | ( B extends U ? X : Y )</span>type T3 <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>type Diff<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span>type T4 <span class="token operator">=</span> Diff<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"e"</span><span class="token operator">></span><span class="token punctuation">;</span>type NotNull<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> undefined <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span>type T5 <span class="token operator">=</span> NotNull<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> undefined <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 官方预置的：</span><span class="token comment" spellcheck="true">// Exclude&lt;T, U></span><span class="token comment" spellcheck="true">// NonNullable&lt;T></span><span class="token comment" spellcheck="true">// Extract&lt;T, U></span>type Y7 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> stringn<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h1 id="8-ES6-与-CommonJS-的模块系统"><a href="#8-ES6-与-CommonJS-的模块系统" class="headerlink" title="8. ES6 与 CommonJS 的模块系统"></a>8. ES6 与 CommonJS 的模块系统</h1><p>两种模式不要混用</p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><h1 id="9-命名空间"><a href="#9-命名空间" class="headerlink" title="9. 命名空间"></a>9. 命名空间</h1><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// a.ts</span>namespace Shape <span class="token punctuation">{</span>  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cricle</span><span class="token punctuation">(</span>r<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b.ts</span><span class="token comment" spellcheck="true">/** * 下面是三斜线指令 * 在 b.ts 调用 a.ts 的 cricle 方法 必须加上此指令 */</span><span class="token comment" spellcheck="true">/// &lt;reference path="a.ts" /></span>namespace Shape <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12.56 共享命名空间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// underfined 命名空间内的属性必须导出才能访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4  共享命名空间</span><span class="token comment" spellcheck="true">/** * 为了使得写法更加简便 * 可以使用此写法 * 此写法和模块没有关系 */</span><span class="token keyword">import</span> cricle <span class="token operator">=</span> Shape<span class="token punctuation">.</span>cricle<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span></code></pre><h1 id="10-声明合并"><a href="#10-声明合并" class="headerlink" title="10. 声明合并"></a>10. 声明合并</h1><h2 id="接口合并"><a href="#接口合并" class="headerlink" title="接口合并"></a>接口合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * 后申明的接口顺序靠前，接口内部函数先声明的靠前 * 函数参数类型为字面量时，优先级最高 */</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// y: string; // Error</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 5</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 2</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 3</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 4</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数重载顺序 1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这个变量必须具备这两个接口的所有成员</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数重载</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="函数与命名空间合并"><a href="#函数与命名空间合并" class="headerlink" title="函数与命名空间合并"></a>函数与命名空间合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Lib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>namespace Lib <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lib<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.0</span></code></pre><h2 id="类与命名空间合并"><a href="#类与命名空间合并" class="headerlink" title="类与命名空间合并"></a>类与命名空间合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>namespace C <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h2 id="枚举与命名空间合并"><a href="#枚举与命名空间合并" class="headerlink" title="枚举与命名空间合并"></a>枚举与命名空间合并</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span>  Yellow<span class="token punctuation">,</span>  Bule<span class="token punctuation">,</span><span class="token punctuation">}</span>namespace Color <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * { *     0: "Red", *     1: "Yellow", *     2: "Bule", *     "Red": 0, *     "Yellow": 1, *     "Blue": 2, *     "mix": f mix () * } */</span></code></pre><h1 id="11-如何编写声明文件"><a href="#11-如何编写声明文件" class="headerlink" title="11. 如何编写声明文件"></a>11. 如何编写声明文件</h1><p>引入第三方类库并为它们编写声明文件<br>类库分为三种：</p><ul><li>全局类库</li><li>模块类库</li><li>umd 类库</li></ul><h2 id="引入-jQuery"><a href="#引入-jQuery" class="headerlink" title="引入 jQuery"></a>引入 jQuery</h2><ol><li>安装</li></ol><pre class=" language-cmd"><code class="language-cmd">npm i jquerynpm i @types/jquery -D</code></pre><p>大多数类库都会提供声明文件<br>可以上 <a href="microsoft.github.io/TypeSearch">TypeSearch</a> 去查找社区有没有为类库提供声明文件</p><ol start="2"><li>使用</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">"jquery"</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="如何自己编写一个声明文件"><a href="#如何自己编写一个声明文件" class="headerlink" title="如何自己编写一个声明文件"></a>如何自己编写一个声明文件</h4><p>可以参考此网站 <a href="definitelytyped.org/guides/contributing.html">Definitely Typed</a></p><h3 id="全局库"><a href="#全局库" class="headerlink" title="全局库"></a>全局库</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// global-lib.js</span><span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>globalLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span>globalLib<span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"global Lib do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// global-lib.d.js 声明文件</span><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> globalLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">declare</span> namespace globalLib <span class="token punctuation">{</span>  <span class="token keyword">const</span> version<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// example.ts 使用示范</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="模块库"><a href="#模块库" class="headerlink" title="模块库"></a>模块库</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// module-lib.js</span><span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>moduleLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span>moduleLib<span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"moduleLib Lib do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// module-lib.d.js 声明文件</span><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> globalLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">declare</span> namespace moduleLib <span class="token punctuation">{</span>  <span class="token keyword">const</span> version<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// example.ts 使用示范</span><span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">"./module-lib.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="umd-库"><a href="#umd-库" class="headerlink" title="umd 库"></a>umd 库</h3><p>tsconfig 默认不允许 umd 使用全局引用方式，若如果想通过全局引用，则需要打开设置 “allowUmdGlobalAccess”: true</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// umd-lib.js</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">module</span> <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">module</span><span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    root<span class="token punctuation">.</span>umdLib <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    version<span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"umdLib do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// umd-lib.d.js 声明文件</span><span class="token keyword">declare</span> namespace umdLib <span class="token punctuation">{</span>  <span class="token keyword">const</span> version<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> as namespace umdLib<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">=</span> umdLib<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// example.ts 使用示范</span><span class="token keyword">import</span> umdLib <span class="token keyword">from</span> <span class="token string">"./umd-lib.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>umdLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="给类库添加自定义方法"><a href="#给类库添加自定义方法" class="headerlink" title="给类库添加自定义方法"></a>给类库添加自定义方法</h2><h3 id="moment-库"><a href="#moment-库" class="headerlink" title="moment 库"></a>moment 库</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> m <span class="token keyword">from</span> <span class="token string">"moment"</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"moment"</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span>m<span class="token punctuation">.</span>myFunction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="声明文件的依赖"><a href="#声明文件的依赖" class="headerlink" title="声明文件的依赖"></a>声明文件的依赖</h2><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><blockquote><p>/node_modules/@types/jquery/package.json</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"index"</span></code></pre><blockquote><p>/node_modules/@types/jquery/index.d.js</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/// &lt;reference types="sizzle" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="jQueryStatic.d.ts" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="JQuery.d.ts" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="misc.d.ts" /></span><span class="token comment" spellcheck="true">/// &lt;reference types="legacy.d.ts" /></span><span class="token keyword">export</span> <span class="token operator">=</span> jQuery<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/wo-de-di-yi-pian-bo-ke/"/>
      <url>/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>今天是端午假期的第二个休息日，早上拖着慵懒的身体从床上爬下来，从冰箱里随手拿了一个红豆沙馅的粽子，丢进了微波炉，就去刷牙洗脸了。吃完粽子，舔了舔嘴角遗留的糯米粒，习惯性地往电脑前一坐，开启了一天的宅家模式。</p><p>我打开了油管，手指在触控板上不停的滑动着，突然一个 “挑战15分钟内完成一个贪吃蛇游戏” 吸引了我的注意力。点进去一看是个老外，他熟练的使用 javascript 在电脑面前敲着，一边激情地敲代码，一边用夸张地肢体动作配合着搞怪的表情，生动的讲解着他的思路，英语3级不到的我，一脸懵逼，还好油管自带翻译功能救了我一命。老外用的原生 js 语法和 p5.js，可能有小伙伴就会问了 p5.js 是什么？其实我也不知道，大家有兴趣可以去了解一下。于是我谷歌了一下，找到一个知乎大佬的文章。内容就是————让艺术家、设计师、教育工作者和初学者等都能够进行编码，并且是为现代web重新打造。它有着完整的一套作画功能，但并不意味着你能做的只是在canvas上画画。事实上，你可以把整个浏览器都当成你的“画布”，利用插件库你可以很方便地与其他html5元素（如文本，输入框，视频，摄像头和音频）进行交互。感觉国内挺冷门的，不过做一些小游戏、小动画什么的好像很方便。</p><p>看着看着不一会老外就完成了挑战，一个简易的贪吃蛇小游戏就这么完成了，看得我手很是痒痒，总想干点什么。于是了解到hexo这个博客框架，身为前端工程师的我，这还不分分钟搞定？等搭建好之后，写点技术文章、读书笔记或者一些随笔也是再好不过的。正好最近买了很多技术书籍，等我一本一本的把书中的精华吸收之后，并且用精妙的文字总结写下！我大腿一拍，好！以后要坚持写博客！</p>]]></content>
      
      
      <categories>
          
          <category> 个人日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
