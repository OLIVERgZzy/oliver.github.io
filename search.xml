<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序中使用正则表达式替换富文本中图片的宽度</title>
      <link href="posts/RegularReplaceHtmlImg/"/>
      <url>posts/RegularReplaceHtmlImg/</url>
      
        <content type="html"><![CDATA[<h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>在做项目时，富文本中图片大小各不相同，有的比较宽、有得则非常小。因此宽度不能全部都设置为 100% 撑满，小图片就会特别模糊，影响美观。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>所以解决方案就是，在渲染之前先处理一遍。简单来说，就是利用正则表达式获取富文本中每个图片的宽度，如果宽度超过 300 则宽度返回屏幕宽度，否则宽度返回的就是图片真实的宽度。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatRichText = <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!html || html.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> showW: <span class="built_in">number</span>, <span class="attr">showH</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">let</span> clientWidth = <span class="number">375</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (clientWidth &gt; <span class="number">750</span>) &#123;</span><br><span class="line">    clientWidth = <span class="number">750</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> rem = (clientWidth / <span class="number">375</span>) * <span class="number">100</span>;</span><br><span class="line">  showW = clientWidth - rem * <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newContent = html.replace(<span class="regexp">/&lt;img[^&gt;]*&gt;/gi</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> getW: <span class="built_in">any</span> = match.match(<span class="regexp">/width\b\s*=\s*[\&#x27;\&quot;]?([^\&#x27;\&quot;]*)[\&#x27;\&quot;]?/i</span>); <span class="comment">//获取到的宽</span></span><br><span class="line">    <span class="keyword">let</span> getH: <span class="built_in">any</span> = match.match(<span class="regexp">/height\b\s*=\s*[\&#x27;\&quot;]?([^\&#x27;\&quot;]*)[\&#x27;\&quot;]?/i</span>); <span class="comment">//获取到的高</span></span><br><span class="line">    <span class="keyword">const</span> getDataW: <span class="built_in">any</span> = match.match(</span><br><span class="line">      /data\-width\b\s*=\s*[\<span class="string">&#x27;\&quot;]?([^\&#x27;\&quot;]*)[\&#x27;\&quot;]?/i</span></span><br><span class="line"><span class="string">    ); //获取到的宽--兼容版本</span></span><br><span class="line"><span class="string">    const getDataH: any = match.match(</span></span><br><span class="line"><span class="string">      /data\-height\b\s*=\s*[\&#x27;\&quot;]?([^\&#x27;\&quot;]*)[\&#x27;\&quot;]?/i</span></span><br><span class="line"><span class="string">    ); //获取到的高--兼容版本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 兼容</span></span><br><span class="line"><span class="string">    if (getDataW) &#123;</span></span><br><span class="line"><span class="string">      if (parseFloat(getDataW[1]) &gt;= 90) &#123;</span></span><br><span class="line"><span class="string">        //大于300的</span></span><br><span class="line"><span class="string">        showH = parseInt((parseFloat(getDataH[1] + &quot;&quot;) * showW) / 90 + &quot;&quot;);</span></span><br><span class="line"><span class="string">        const replaceImg = match.replace(</span></span><br><span class="line"><span class="string">          /style=\&quot;(.*)\&quot;/gi,</span></span><br><span class="line"><span class="string">          &#x27;</span>style=<span class="string">&quot;width:&#x27; + showW + &quot;</span>px;height:<span class="string">&quot; + showH + &#x27;&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">        match =</span></span><br><span class="line"><span class="string">          &#x27;</span>&lt;div style=<span class="string">&quot;width:&#x27; +</span></span><br><span class="line"><span class="string">          showW +</span></span><br><span class="line"><span class="string">          &quot;</span>px;height:<span class="string">&quot; +</span></span><br><span class="line"><span class="string">          showH +</span></span><br><span class="line"><span class="string">          &#x27;px&quot;</span>&gt;<span class="string">&#x27; +</span></span><br><span class="line"><span class="string">          replaceImg +</span></span><br><span class="line"><span class="string">          &quot;&lt;/div&gt;&quot;;</span></span><br><span class="line"><span class="string">      &#125; else &#123;</span></span><br><span class="line"><span class="string">        // &lt;300</span></span><br><span class="line"><span class="string">        showW = parseInt(parseFloat(getDataW[1] + &quot;&quot;) * 3 + &quot;&quot;);</span></span><br><span class="line"><span class="string">        showH = parseInt(parseFloat(getDataH[1] + &quot;&quot;) * 3 + &quot;&quot;);</span></span><br><span class="line"><span class="string">        const replaceImg = match.replace(</span></span><br><span class="line"><span class="string">          /style=\&quot;(.*)\&quot;/gi,</span></span><br><span class="line"><span class="string">          &#x27;</span>style=<span class="string">&quot;width:&#x27; + showW + &quot;</span>px;height:<span class="string">&quot; + showH + &#x27;px&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">        match =</span></span><br><span class="line"><span class="string">          &#x27;</span>&lt;div style=<span class="string">&quot;width:&#x27; +</span></span><br><span class="line"><span class="string">          showW +</span></span><br><span class="line"><span class="string">          &quot;</span>px;height:<span class="string">&quot; +</span></span><br><span class="line"><span class="string">          showH +</span></span><br><span class="line"><span class="string">          &#x27;px&quot;</span>&gt;<span class="string">&#x27; +</span></span><br><span class="line"><span class="string">          replaceImg +</span></span><br><span class="line"><span class="string">          &quot;&lt;/div&gt;&quot;;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125; else if (getW) &#123;</span></span><br><span class="line"><span class="string">      // 新的</span></span><br><span class="line"><span class="string">      if (getW &gt; showW) &#123;</span></span><br><span class="line"><span class="string">        if (getH) &#123;</span></span><br><span class="line"><span class="string">          showH = (showW * parseInt(getH[1])) / parseInt(getW[1]);</span></span><br><span class="line"><span class="string">          showH = showH + &quot;px&quot;;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">          showH = &quot;auto&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        const replaceImg = match.replace(</span></span><br><span class="line"><span class="string">          /style=\&quot;(.*)\&quot;/gi,</span></span><br><span class="line"><span class="string">          &#x27;</span>style=<span class="string">&quot;width:&#x27; + showW + &quot;</span>px;height: <span class="string">&quot; + showH + &#x27;&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">        match =</span></span><br><span class="line"><span class="string">          &#x27;</span>&lt;div style=<span class="string">&quot;width:&#x27; +</span></span><br><span class="line"><span class="string">          showW +</span></span><br><span class="line"><span class="string">          &quot;</span>px;height: <span class="string">&quot; +</span></span><br><span class="line"><span class="string">          showH +</span></span><br><span class="line"><span class="string">          &#x27;&quot;</span>&gt;<span class="string">&#x27; +</span></span><br><span class="line"><span class="string">          replaceImg +</span></span><br><span class="line"><span class="string">          &quot;&lt;/div&gt;&quot;;</span></span><br><span class="line"><span class="string">      &#125; else &#123;</span></span><br><span class="line"><span class="string">        if (getH) &#123;</span></span><br><span class="line"><span class="string">          getH = getH[1] + &quot;px&quot;;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">          getH = &quot;auto&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        const replaceImg = match.replace(</span></span><br><span class="line"><span class="string">          /style=\&quot;(.*)\&quot;/gi,</span></span><br><span class="line"><span class="string">          &#x27;</span>style=<span class="string">&quot;width:&#x27; + getW[1] + &quot;</span>px;height: <span class="string">&quot; + getH + &#x27;&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">        match =</span></span><br><span class="line"><span class="string">          &#x27;</span>&lt;div style=<span class="string">&quot;width:&#x27; +</span></span><br><span class="line"><span class="string">          getW[1] +</span></span><br><span class="line"><span class="string">          &quot;</span>px;height: <span class="string">&quot; +</span></span><br><span class="line"><span class="string">          getH +</span></span><br><span class="line"><span class="string">          &#x27;&quot;</span>&gt;<span class="string">&#x27; +</span></span><br><span class="line"><span class="string">          replaceImg +</span></span><br><span class="line"><span class="string">          &quot;&lt;/div&gt;&quot;;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return match;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  return newContent;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 富文本 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 项目使用 Eslint + Prettier + husky 提高前端项目质量</title>
      <link href="posts/Husky/"/>
      <url>posts/Husky/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近几年 TypeScript 越来越得到开发者的喜爱，所以在我的推动下，公司也开始使用 TypeScript 来开发微信小程序（正好微信开发工具也支持了）。选择它的原因是因为 TypeScript 提供了静态类型检查的功能，而且还可以使用一些面向对象的编程语法，使得前端代码更加灵活更加严谨。</p><h1 id="规范问题"><a href="#规范问题" class="headerlink" title="规范问题"></a>规范问题</h1><p>由于使用 TypeScript 作为开发微信小程序的语言，所以做了一些小调整，在 Git 提交时排除了所有后缀为 .js 的文件。这样做的好处是，减少冗余文件的提交，只需要提交 .ts 的文件即可。其他开发人员只能修改 .ts 文件，编译出的 .js 只作为本地预览开发使用。但是最终提交到腾讯服务器的还是 .js 文件而不是 .ts。</p><p>所以为了防止一些同事，忘记上传 .ts 文件导致的问题（没有 .ts 文件就无法编译出 .js，没有 .js 文件小程序就无法执行）、还有每个人代码风格不一致，或者代码不规范不严谨，因此我产生几个问题：</p><ul><li>如何让团队拥有更好的代码意识？</li><li>如何使团队的代码风格近乎统一？</li><li>如何防止错误的、不严谨的代码被提交？</li></ul><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><ul><li><a href="https://eslint.org/docs/user-guide/getting-started">ESLint</a> - 代码检查工具</li><li><a href="https://prettier.io/docs/en/install.html">Prettier</a> - 代码格式化工具</li><li><a href="https://github.com/typicode/husky">Husky</a> - Git Hook（Git 钩子）</li></ul><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint eslint-config-prettier eslint-plugin-prettier eslint-plugin-typescript husky prettier</span><br></pre></td></tr></table></figure><h2 id="配置-eslintrc-js"><a href="#配置-eslintrc-js" class="headerlink" title="配置 .eslintrc.js"></a>配置 .eslintrc.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prettier/@typescript-eslint&quot;</span>, <span class="comment">// 样式规范以 prettier 为准</span></span><br><span class="line">    <span class="string">&quot;plugin:prettier/recommended&quot;</span>, <span class="comment">// 样式规范以 prettier 为准</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// 自定义规则</span></span><br><span class="line">    <span class="string">&quot;prettier/prettier&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    eqeqeq: [<span class="string">&quot;warn&quot;</span>, <span class="string">&quot;always&quot;</span>],</span><br><span class="line">    <span class="string">&quot;prefer-const&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;error&quot;</span>,</span><br><span class="line">      &#123; <span class="attr">destructuring</span>: <span class="string">&quot;all&quot;</span>, <span class="attr">ignoreReadBeforeAssign</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/ban-types&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/no-explicit-any&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/explicit-module-boundary-types&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/no-unused-vars&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/interface-name-prefix&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/explicit-member-accessibility&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/no-triple-slash-reference&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/ban-ts-ignore&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/no-this-alias&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/triple-slash-reference&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;error&quot;</span>,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;always&quot;</span>, <span class="attr">types</span>: <span class="string">&quot;never&quot;</span>, <span class="attr">lib</span>: <span class="string">&quot;never&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="配置-prettierrc"><a href="#配置-prettierrc" class="headerlink" title="配置 .prettierrc"></a>配置 .prettierrc</h2><p>具体配置参考官网：<a href="https://prettier.io/docs/en/options.html">Options</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;endOfLine&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;jsxBracketSameLine&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;arrowParens&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;eslintIntegration&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h2><p>添加 husky 配置，添加 eslint 命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;eslint . --ext .ts  --fix&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;compile&quot;</span>: <span class="string">&quot;./node_modules/typescript/bin/tsc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tsc&quot;</span>: <span class="string">&quot;node ./node_modules/typescript/lib/tsc.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span>: <span class="string">&quot;npm run eslint &amp;&amp; npm run tsc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在提交代码前，ESLint 会根据代码规约检查代码，Prettier 会根据规则自动格式化代码，在这之后会编译 .ts 文件。如果有任何不符合规范的代码，或者是编译报错，提交将无法完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line">git commit -m <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>借助工具能够实现半自动化代码检查、格式化、编译。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> ESLint </tag>
            
            <tag> Prettier </tag>
            
            <tag> Husky </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《你不知道的JavaScript》笔记之：this</title>
      <link href="posts/JsThis/"/>
      <url>posts/JsThis/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近喜欢利用思维导图这个强大的工具，来梳理和提练知识要点。用的是 <a href="https://naotu.baidu.com/">百度脑图</a>这个工具，应该是百度目前唯一一款良心产品了。😂 下面我按照思维导图的脉络，去把这个知识点来说清楚吧。（思维导图单击可放大查看）</p><p><img src="/images/this%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.svg" alt="this思维导图.png"></p><h1 id="一、关于-this"><a href="#一、关于-this" class="headerlink" title="一、关于 this"></a>一、关于 this</h1><p>this 关键字是 JavaScript 中最复杂的机制之一。搞懂它有助于驾驭 JavaScript 这匹野马。</p><h1 id="二、对-this-错误的认识"><a href="#二、对-this-错误的认识" class="headerlink" title="二、对 this 错误的认识"></a>二、对 this 错误的认识</h1><p>在我刚从后端转前端初期那段时间，我也一样对 this 有这两大错误认识，这可能是就是 this 最具迷惑性的地方吧。在理解 this 是如何工作之前，我们就先消除这两种对于 this 的错误认识吧。</p><h2 id="2-1-指向自身"><a href="#2-1-指向自身" class="headerlink" title="2.1 指向自身"></a>2.1 指向自身</h2><p>也许是受 Java 语言的影响，在我刚开始学习前端的初期也误以为 JavaScript 的 this 关键字和 Java 中的 this 关键字功能类似。</p><p>让我来回忆一下 this 关键字在 Java 中有哪些用法吧：</p><ol><li>关键字可用来引用当前类的实例变量</li><li>关键字可用于调用当前类方法</li><li>可以用来调用当前类的构造函数</li></ol><p>我在编写 JavaScript 代码初期，认为既然 JavaScript 中函数可以被看作是一个对象，那么在函数中使用 this 从内部引用函数自身也是可行的，顺着这个惯性思维我写下了如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.count); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>虽然表面上看 foo 被调用了 4 次，但是实际上 foo.count 仍然是 0。所以看来 this.count 和 foo.count 指向的并不是同一个变量。</p><p>在执行 foo.count = 0; 时会在函数对象 foo 添加一个属性 count，而 this.count 则在全局作用域中创建 count 变量，它的值是 NaN。</p><p>那么如何解决这种问题呢？</p><ol><li>通过词法作用域解决（这种方法虽然有效，但是回避了 this）：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  data.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.count); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过具名函数解决：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.count); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><ol start="3"><li>通过 call 解决：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  foo.call(foo, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.count); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="2-2-联通作用域"><a href="#2-2-联通作用域" class="headerlink" title="2.2 联通作用域"></a>2.2 联通作用域</h2><p>第二种常见错误是，this 指向函数的作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">this</span>.bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// undefined 或 TypeError: this.bar is not a function</span></span><br></pre></td></tr></table></figure><p>这段代码具有误导性，企图在 foo 函数中调用 bar（浏览器环境下可以调通，Node 环境下报错），又因为 bar 是在 foo 函数内部中被调用，所以从写法角度去看，会造成在 bar 函数中可以访问到变量 a 的假象，但是实际上并不能。</p><p>以上就是学习 this 最容易犯的两大错误认识。</p><h1 id="三、this-工作机制"><a href="#三、this-工作机制" class="headerlink" title="三、this 工作机制"></a>三、this 工作机制</h1><p>在消除对 this 误解之后，我们来探寻 this 真正的工作机制到底是什么。</p><p>每个函数的 this 是在调用时被绑定的，完全取决于函数的调用位置（也就是函数的调用方法）</p><h1 id="四、理解-this-绑定过程"><a href="#四、理解-this-绑定过程" class="headerlink" title="四、理解 this 绑定过程"></a>四、理解 this 绑定过程</h1><h2 id="4-1-寻找函数被调用的位置"><a href="#4-1-寻找函数被调用的位置" class="headerlink" title="4.1 寻找函数被调用的位置"></a>4.1 寻找函数被调用的位置</h2><p>寻找函数被调用的位置，最重要的就是分析调用栈（就是为了到达当前执行位置所调用的所有函数）。调用位置就在当前正在执行的函数的前一个调用中。</p><p>用代码来表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈：baz</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置是全局作用域</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;baz&quot;</span>);</span><br><span class="line"></span><br><span class="line">  bar(); <span class="comment">// &lt;--- bar 的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈：baz --&gt; bar</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置在baz中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line">  foo(); <span class="comment">// &lt;--- foo 的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈：baz --&gt; bar --&gt; foo</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置在bar中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">  foo(); <span class="comment">// &lt;--- bar 的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baz(); <span class="comment">// &lt;-- baz 的调用位置</span></span><br></pre></td></tr></table></figure><h2 id="4-2-判断绑定规则"><a href="#4-2-判断绑定规则" class="headerlink" title="4.2 判断绑定规则"></a>4.2 判断绑定规则</h2><p>在找到函数被调用的位置之后，接下来就可以根据优先级判断适用的绑定规则。<br>以下绑定规则按优先级由高到低排列。</p><h3 id="4-2-1-new-绑定"><a href="#4-2-1-new-绑定" class="headerlink" title="4.2.1 new 绑定"></a>4.2.1 new 绑定</h3><p>使用 new 来调用函数，或者发生构造函数调用时，会自动执行下面这些操作。</p><ol><li>创建（构造）一个全新的对象。</li><li>这个新对象会执行 [[Prototype]]连接。</li><li>这个新对象会绑定到函数调用的 this。</li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>使用 new 调用 foo(…) 时，会构造一个新对象并把它绑定到 foo(…)调用中的 this 上。</p><h3 id="4-2-2-显示绑定"><a href="#4-2-2-显示绑定" class="headerlink" title="4.2.2 显示绑定"></a>4.2.2 显示绑定</h3><p>JavaScript 提供了两个方法可以强制在某个对象上调用函数，call(…) 和 apply(…) 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.call(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>通过 foo.call(…)，我们可以在调用 foo 时强制把它的 this 绑定在 obj 上。</p><h3 id="4-2-3-隐式绑定"><a href="#4-2-3-隐式绑定" class="headerlink" title="4.2.3 隐式绑定"></a>4.2.3 隐式绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  foo: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo(); <span class="comment">// 2 (调用位置)</span></span><br></pre></td></tr></table></figure><p>上面这段代码，调用位置使用 obj 上下文来引用函数，可以说成 obj 对象“拥有”或者“包含”函数引用。</p><p>当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象中。</p><p>对象属性引用链中只有最后一层在调用位置中起作用。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">42</span>,</span><br><span class="line">  foo: foo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  obj2: obj2,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.obj2.foo(); <span class="comment">// 42 (调用位置)</span></span><br></pre></td></tr></table></figure><h3 id="4-2-4-默认绑定"><a href="#4-2-4-默认绑定" class="headerlink" title="4.2.4 默认绑定"></a>4.2.4 默认绑定</h3><p>最常用的函数调用类型：独立函数调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前调用栈是：foo</span></span><br><span class="line">  <span class="comment">// 因此，当前调用位置是全局作用域</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面这段代码，foo() 的调用的位于全局作用域中，且 foo() 是直接使用不带任何修饰的函数引用进行调用的，因此适用于默认绑定。</p><p>在严格模式下，则不能将全局对象用于默认绑定，因此 this 会绑定到 undefined。</p><h2 id="4-3-绑定例外"><a href="#4-3-绑定例外" class="headerlink" title="4.3 绑定例外"></a>4.3 绑定例外</h2><h3 id="4-3-1-被忽略的-this"><a href="#4-3-1-被忽略的-this" class="headerlink" title="4.3.1 被忽略的 this"></a>4.3.1 被忽略的 this</h3><p>当 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认规定规则:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo.call(<span class="literal">null</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-间接引用"><a href="#4-3-2-间接引用" class="headerlink" title="4.3.2 间接引用"></a>4.3.2 间接引用</h3><p>调用函数的“间接引用”会应用默认绑定规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">foo</span>: foo &#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">o.foo(); <span class="comment">// 3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>复制表达式 <code>p.foo = o.foo</code> 的返回值是目标函数的引用，因此调用位置是 foo() 而不是 p.foo() 或者 o.foo()。</p><h1 id="五、注意"><a href="#五、注意" class="headerlink" title="五、注意"></a>五、注意</h1><h2 id="5-1-箭头函数"><a href="#5-1-箭头函数" class="headerlink" title="5.1 箭头函数"></a>5.1 箭头函数</h2><p>在 ES6 中规范中的箭头函数，完全不适用于四条绑定规则，而是根据当前词法作用域来决定 this。</p><h2 id="5-2-编码风格"><a href="#5-2-编码风格" class="headerlink" title="5.2 编码风格"></a>5.2 编码风格</h2><p>在编码时，词法作用域风格与 this 风格代码不要混用，同时使用会使代码更加难以维护，并且可能也会更难编写。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>如果要判断一个运行中的函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p><ol><li>由 new 调用？绑定到新创建的对象。</li><li>由 call 或者 apply（或者 bind）调用？绑定到指定的对象。</li><li>由上下文对象调用？绑定到那个上下文对象。</li><li>默认：在严格模式下绑定到 undefined，否则绑定到全局对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门Go语言学习笔记</title>
      <link href="posts/GoLangLearn/"/>
      <url>posts/GoLangLearn/</url>
      
        <content type="html"><![CDATA[<h1 id="1-编写第一个-Go-程序"><a href="#1-编写第一个-Go-程序" class="headerlink" title="1. 编写第一个 Go 程序"></a>1. 编写第一个 Go 程序</h1><h2 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本程序结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main <span class="comment">// 包，表明代码所在模块（包）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="comment">// 引入代码依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hellow world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用程序入口"><a href="#应用程序入口" class="headerlink" title="应用程序入口"></a>应用程序入口</h2><ol><li>必须是 main 包：package main</li><li>必须是 main 方法：func main()</li><li>文件名不一定是 main.go</li></ol><h2 id="退出返回值"><a href="#退出返回值" class="headerlink" title="退出返回值"></a>退出返回值</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>Go 中 main 函数不支持任何返回值</li><li>通过 os.Exit 来返回状态</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">  os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>main 函数不支持传入参数<br>func main(<del>arg []string</del>)</li><li>在程序中直接通过 os.Args 获取命令行参数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>, os.Args[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// go run hello_world.go oliver</span></span><br><span class="line"><span class="comment">// hello world oliver</span></span><br></pre></td></tr></table></figure><h1 id="2-变量、常量以及与其他语言的差异"><a href="#2-变量、常量以及与其他语言的差异" class="headerlink" title="2. 变量、常量以及与其他语言的差异"></a>2. 变量、常量以及与其他语言的差异</h1><h2 id="编写单元测试程序"><a href="#编写单元测试程序" class="headerlink" title="编写单元测试程序"></a>编写单元测试程序</h2><ol><li>源码文件以 _test 结尾：xxx_test.go</li><li>测试方法名以 Test 开头：func TestXXX(t *testing.T) {…}</li></ol><h2 id="VSCode-调试-Go"><a href="#VSCode-调试-Go" class="headerlink" title="VSCode 调试 Go"></a>VSCode 调试 Go</h2><ol><li>安装 vscode 插件：Go Autotest</li><li>查看 vscode 输出</li></ol><h2 id="单元测试实现一个斐波那契数列"><a href="#单元测试实现一个斐波那契数列" class="headerlink" title="单元测试实现一个斐波那契数列"></a>单元测试实现一个斐波那契数列</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFibList</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 赋值方式</span></span><br><span class="line">  <span class="comment">// var a int = 1</span></span><br><span class="line">  <span class="comment">// var b int = 1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 赋值方式</span></span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    a <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">    b <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">  )</span><br><span class="line">  fmt.Print(a)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    fmt.Print(<span class="string">&quot; &quot;</span>, b)</span><br><span class="line">    tmp := a</span><br><span class="line">    a = b</span><br><span class="line">    b = tmp + a</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>赋值可以进行自动类型推断</li><li>在一个赋值语句中可以对多个变量进行同时赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 交换两个变量的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExchange</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a := <span class="number">1</span></span><br><span class="line">  b := <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// tmp := a</span></span><br><span class="line">  <span class="comment">// a = b</span></span><br><span class="line">  <span class="comment">// b = tmp</span></span><br><span class="line"></span><br><span class="line">  a, b = b, a <span class="comment">// 等价于上面那段代码</span></span><br><span class="line"></span><br><span class="line">  fmt.Print(a， b) <span class="comment">// 2 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>快速设置连续值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连续常量简写</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  Monday    = <span class="literal">iota</span> + <span class="number">1</span>      <span class="comment">// 1</span></span><br><span class="line">  Tuesday                   <span class="comment">// 2</span></span><br><span class="line">  Wednesday                 <span class="comment">// 3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连续位运常量</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  Readable = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">  Writable</span><br><span class="line">  Executable</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestContantTry</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(Monday, Tuesday) <span class="comment">// 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestContantTry1</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a := <span class="number">7</span></span><br><span class="line">  fmt.Println(a&amp;Readable == Readable, a&amp;Writable == Writable, a&amp;Executable == Executable) <span class="comment">// true true true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3. 基本数据类型"></a>3. 基本数据类型</h1><ul><li>bool</li><li>string</li><li>int int8 int16 int32 int64</li><li>uint uint8 uint16 uint32 uint64 uintptr</li><li>byte // alias for uint8</li><li>rune // alias fro int32, represnts a Unicode code point</li><li>float32 float64</li><li>complex64 complex128</li></ul><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p><strong>与其他主要编程语言的差异</strong></p><ol><li>Go 语言不允许隐式类型转换</li><li>别名和原有类型也不能进行隐式类型转换</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyIntType <span class="keyword">int64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestImplicit</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">int64</span></span><br><span class="line">    b = <span class="keyword">int64</span>(a)</span><br><span class="line">    <span class="keyword">var</span> c MyIntType</span><br><span class="line">    <span class="comment">// c = b              // Error：不允许隐式类型转换</span></span><br><span class="line">    c = MyIntType(b)</span><br><span class="line">    fmt.Print(a, b, c)    <span class="comment">// 1 1 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型的预定义值"><a href="#类型的预定义值" class="headerlink" title="类型的预定义值"></a>类型的预定义值</h2><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUnit32</li></ol><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><p><strong>与其他主要编程语言的差异</strong></p><ol><li>不支持指针运算</li><li>string 是值类型，其默认的初始化值为空字符串，而不是 nil</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPoint</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a := <span class="number">1</span></span><br><span class="line">  aPtr := &amp;a</span><br><span class="line">  <span class="comment">// aPtr = aPtr + 1             // Error: 不支持指针运算</span></span><br><span class="line">  fmt.Println(a, aPtr)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%T %T&quot;</span>, a, aPtr) <span class="comment">// 1 0xc000014258</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestString</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;*&quot;</span> + s + <span class="string">&quot;*&quot;</span>)   <span class="comment">// **</span></span><br><span class="line">  fmt.Println(<span class="built_in">len</span>(s))             <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;空字符串！&quot;</span>) <span class="comment">// 空字符串！</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>A + B 输出结果 30</td></tr><tr><td>-</td><td>相减</td><td>A - B 输出结果 - 10</td></tr><tr><td>*</td><td>相乘</td><td>A - B 输出结果 200</td></tr><tr><td>/</td><td>相除</td><td>B / A 输出结果 2</td></tr><tr><td>%</td><td>求余</td><td>B % A 输出结果 0</td></tr><tr><td>++</td><td>自增</td><td>A++ 输出结果 11</td></tr><tr><td>–</td><td>自减</td><td>A– 输出结果 9</td></tr></tbody></table><p><strong>Go 语言没有前置的 ++，–，<del>（++a）</del></strong></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个值是否相等，如果相等返回 True 否则返回 False</td><td>(A==B) 为 False</td></tr><tr><td>!=</td><td>检查两个值是否不相等，如果不相等返回 True 否则返回 False</td><td>(A != B) 为 Ttue</td></tr><tr><td>&gt;</td><td>检查左边值是否大于右边值，如果是返回 True 否则返回 False</td><td>(A&gt;B) 为 False</td></tr><tr><td>&lt;</td><td>检查左边值是否小于右边值，如果是返回 True 否则返回 False</td><td>(A&lt;B) 为 Ttue</td></tr><tr><td>&gt;=</td><td>检查左边值是否大于等于右边值，如果是返回 True 否则返回 False</td><td>(A&gt;=B) 为 False</td></tr><tr><td>&lt;=</td><td>检查左边值是否小于等于右边值，如果是返回 True 否则返回 False</td><td>(A&lt;=B) 为 Ttue</td></tr></tbody></table><h2 id="用-比较数组"><a href="#用-比较数组" class="headerlink" title="用 == 比较数组"></a>用 == 比较数组</h2><ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相同的才相等</li></ul><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><strong>与其他主要编程语言的差异</strong></p><ul><li>&amp;^ 按位置零<table><thead><tr><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>1 &amp;^ 0</td><td>1</td></tr><tr><td>1 &amp;^ 1</td><td>0</td></tr><tr><td>0 &amp;^ 1</td><td>0</td></tr><tr><td>0 &amp;^ 0</td><td>0</td></tr></tbody></table></li></ul><h1 id="5-条件和循环"><a href="#5-条件和循环" class="headerlink" title="5. 条件和循环"></a>5. 条件和循环</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while 条件循环</span></span><br><span class="line"><span class="comment">// while (n&lt;5)</span></span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n &lt; <span class="number">5</span> &#123;</span><br><span class="line">    n ++</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无限循环</span></span><br><span class="line"><span class="comment">// while (true)</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>与其他主要编程语言的差异</strong></p><ul><li>Go 语言仅支持循环关键字 for</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestWhileLoop</span><span class="params">()</span></span> &#123;</span><br><span class="line">  n := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> n &lt; <span class="number">5</span> &#123;</span><br><span class="line">    n++</span><br><span class="line">    fmt.Println(n)  <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-条件"><a href="#if-条件" class="headerlink" title="if 条件"></a>if 条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="comment">// 条件成立</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件不成立</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">    <span class="comment">// 条件成立</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">    <span class="comment">// 条件成立</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件不成立</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> declaration; conditon &#123;</span><br><span class="line">    <span class="comment">// 条件成立</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>与其他主要编程语言的差异</strong></p><ol><li>condition 表达式结果必须为布尔值</li><li>支持变量赋值</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFun</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="comment">// do sth  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIfMultiSec</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> v,err := someFun(); err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-条件"><a href="#switch-条件" class="headerlink" title="switch 条件"></a>switch 条件</h2><p><strong>与其他主要编程语言的差异</strong></p><ol><li>条件表达式不限制为常量或者整数</li><li>单个 case 中，可以出现多个结果选项，使用逗号分隔</li><li>与 C 语言等规则相反，Go 语言不需要用 break 来明确退出一个 case</li><li>可以不设定 switch 之后的条件表达式，在此种情况下，整个 switch 结构与多个 if…else… 的逻辑作用等同</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSwitchMultCase</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i&lt;<span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> i &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>, <span class="number">2</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Even&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Odd&quot;</span>)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;is not 0-3&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSwitchCaseCondition</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i&lt;<span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Even&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> i%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Odd&quot;</span>)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Unkno&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-数组和切片"><a href="#6-数组和切片" class="headerlink" title="6. 数组和切片"></a>6. 数组和切片</h1><h2 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestArrayInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line">  arr1 := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">  arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">  arr1[<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line">  fmt.Println(arr[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br><span class="line">  fmt.Println(arr, arr3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestArrayTravel</span><span class="params">()</span></span>  &#123;</span><br><span class="line">  arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写法一</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr3); i++ &#123;</span><br><span class="line">    fmt.Println(arr3[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写法二</span></span><br><span class="line">  <span class="keyword">for</span> idx<span class="comment">/*索引*/</span>, e<span class="comment">/*元素*/</span> := <span class="keyword">range</span> arr3 &#123;</span><br><span class="line">    fmt.Println(idx, e)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写法三 不在乎索引</span></span><br><span class="line">  <span class="keyword">for</span> _<span class="comment">/*索引*/</span>, e<span class="comment">/*元素*/</span> := <span class="keyword">range</span> arr3 &#123;</span><br><span class="line">      fmt.Println(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的截取"><a href="#数组的截取" class="headerlink" title="数组的截取"></a>数组的截取</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestArraySection</span><span class="params">()</span></span>  &#123;</span><br><span class="line">  arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">  fmt.Println(arr3[:<span class="number">3</span>]) <span class="comment">// [1 2 3]</span></span><br><span class="line">  fmt.Println(arr3[<span class="number">3</span>:]) <span class="comment">// [4 5]</span></span><br><span class="line">  fmt.Println(arr3[:]) <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片内部结构"><a href="#切片内部结构" class="headerlink" title="切片内部结构"></a>切片内部结构</h2><p><img src="/images/1598367130399.jpg" alt="切片内部结构.png"></p><h2 id="切片声明"><a href="#切片声明" class="headerlink" title="切片声明"></a>切片声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSliceInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> s0 []<span class="keyword">int</span></span><br><span class="line">  fmt.Println(<span class="built_in">len</span>(s0), <span class="built_in">cap</span>(s0)) <span class="comment">// 0 0</span></span><br><span class="line">  s0 = <span class="built_in">append</span>(s0, <span class="number">1</span>)</span><br><span class="line">  fmt.Println(<span class="built_in">len</span>(s0), <span class="built_in">cap</span>(s0)) <span class="comment">// 1 1</span></span><br><span class="line">  </span><br><span class="line">  s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">  fmt.Println(<span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// 4 4</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * []type, len, cap</span></span><br><span class="line"><span class="comment">   * 其中len个元素会被初始化为默认零值，未初始化元素不可以访问</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">  fmt.Println(<span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2)) <span class="comment">// 3 5</span></span><br><span class="line">  fmt.Println(s2[<span class="number">0</span>], s2[<span class="number">1</span>], s2[<span class="number">2</span>]) <span class="comment">// 0 0</span></span><br><span class="line">  s2 = <span class="built_in">append</span>(s2, <span class="number">1</span>)</span><br><span class="line">  fmt.Println(s2[<span class="number">0</span>], s2[<span class="number">1</span>], s2[<span class="number">2</span>], s2[<span class="number">3</span>]) <span class="comment">// 0 0 1</span></span><br><span class="line">  fmt.Println(<span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2)) <span class="comment">// 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片共享存储结构"><a href="#切片共享存储结构" class="headerlink" title="切片共享存储结构"></a>切片共享存储结构</h2><p><img src="/images/1598367323596.jpg" alt="切片共享存储结构.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSliceShareMemory</span><span class="params">()</span></span>  &#123;</span><br><span class="line">  year:= []<span class="keyword">string</span>&#123;<span class="string">&quot;jan&quot;</span>, <span class="string">&quot;feb&quot;</span>, <span class="string">&quot;mar&quot;</span>, <span class="string">&quot;apr&quot;</span>, <span class="string">&quot;may&quot;</span>,<span class="string">&quot;jun&quot;</span>, <span class="string">&quot;jul&quot;</span>, <span class="string">&quot;aug&quot;</span>, <span class="string">&quot;sep&quot;</span>,<span class="string">&quot;oct&quot;</span>,<span class="string">&quot;nov&quot;</span>,<span class="string">&quot;dec&quot;</span>&#125;</span><br><span class="line">  Q2 := year[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">  fmt.Println(Q2, <span class="built_in">len</span>(Q2), <span class="built_in">cap</span>(Q2)) <span class="comment">// [apr may jun] 3 9</span></span><br><span class="line">  summer := year[<span class="number">5</span>:<span class="number">8</span>]</span><br><span class="line">  fmt.Println(summer, <span class="built_in">len</span>(summer), <span class="built_in">cap</span>(summer)) <span class="comment">// [jun jul aug] 3 7</span></span><br><span class="line">  summer[<span class="number">0</span>] = <span class="string">&quot;Unknow&quot;</span></span><br><span class="line">  fmt.Println(Q2) <span class="comment">// [apr may Unknow]</span></span><br><span class="line">  fmt.Println(year) <span class="comment">// [jan feb mar apr may Unknow jul aug sep oct nov dec]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-Map"><a href="#7-Map" class="headerlink" title="7. Map"></a>7. Map</h1><h2 id="Map-声明"><a href="#Map-声明" class="headerlink" title="Map 声明"></a>Map 声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInitMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">  m1 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>&#125;</span><br><span class="line">  fmt.Println(m1[<span class="number">2</span>])                       <span class="comment">// 4</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;len m1=%d \n&quot;</span>, <span class="built_in">len</span>(m1))      <span class="comment">// len m1=3</span></span><br><span class="line">  m2 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  m2[<span class="number">4</span>] = <span class="number">16</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;len m2=%d \n&quot;</span>, <span class="built_in">len</span>(m2))      <span class="comment">// len m2=1</span></span><br><span class="line">  m3 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len m3=%d \n&quot;</span>, <span class="built_in">len</span>(m3))      <span class="comment">// len m3=0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map-元素访问"><a href="#Map-元素访问" class="headerlink" title="Map 元素访问"></a>Map 元素访问</h2><p><strong>与其他主要编程语言的差异</strong><br>在访问的 Key 不存在时，仍会返回零值，不能通过返回 nil 来判断元素是否存在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAccessNotExistingKey</span><span class="params">()</span></span> &#123;</span><br><span class="line">  m1 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  t.Log(m1[<span class="number">1</span>])</span><br><span class="line">  m1[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">  t.Log(m1[<span class="number">2</span>])</span><br><span class="line">  m1[<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> v, ok := m1[<span class="number">3</span>]; ok &#123;</span><br><span class="line">    fmt.Println(ok)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;key 3&#x27;s value is %d \n&quot;</span>, v)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;key 3 is not existing. \n&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map-遍历"><a href="#Map-遍历" class="headerlink" title="Map 遍历"></a>Map 遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTravelMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">  m1 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>&#125;</span><br><span class="line">  <span class="keyword">for</span> k, v := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">控制台输出：</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模仿 Postwoman 实现了一个自己的接口调试工具</title>
      <link href="posts/postchild/"/>
      <url>posts/postchild/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>想必大家平日里开发接口，或多或少都用过 postman 这款接口测试工具，应该都对他不陌生。近日偶然发现一款 web 版接口测试工具并且免费开源。对，它就是 <a href="https://postwoman.io/">postwoman</a>，清爽帅气的 UI 界面，强大的功能，相对 postman 丝毫不逊色，令我啧啧称赞。</p><h1 id="2-动机"><a href="#2-动机" class="headerlink" title="2. 动机"></a>2. 动机</h1><p>出于学习的目的，我也模仿开发了一个精简版接口测试工具并起名为 <a href="http://postchild.io/">postchild</a>。<br>既然是学习的目的，在此次项目中我会尽可能的减少第三方库的使用，尽量靠自己写代码去实现。在过程，也是一种对知识的查漏补缺，尤其是我对 web 通讯、http 协议这方面的不足。下面将会简单介绍一下运用到的技术栈和对未来打算实现的功能。</p><h1 id="3-技术栈"><a href="#3-技术栈" class="headerlink" title="3. 技术栈"></a>3. 技术栈</h1><ol><li>Vue</li><li>Nuxt</li><li>Axios</li><li>Travis CI</li></ol><h1 id="4-功能清单"><a href="#4-功能清单" class="headerlink" title="4. 功能清单"></a>4. 功能清单</h1><ul><li>✅ 基本请求 GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH</li><li>✅ 历史记录(vuex 实现)</li><li>⌛ WebSocket</li><li>⌛ SocketIO</li><li>⌛ gRPC</li><li>⌛ GraphQL</li><li>⌛ 界面主题色切换</li><li>⌛ 授权登录(为了储存历史记录和收藏夹)</li><li>⌛ 收藏夹功能</li></ul><h1 id="5-体验地址"><a href="#5-体验地址" class="headerlink" title="5. 体验地址"></a>5. 体验地址</h1><p>最后再发一下体验地址: <a href="http://postchild.io/">http://postchild.io</a><br>……</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 我的项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
            <tag> Vue </tag>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《你不知道的JavaScript》笔记之：作用域</title>
      <link href="posts/JsScope/"/>
      <url>posts/JsScope/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作用域在 JavaScript 中是个一直是个老生长谈的话题，因为涉及到到原理非常深，知识点非常广，困扰着无数新手前端，我就是其中一个。恰好最近读了《你不知道的 JavaScript》这本书，书中的第一章节就介绍了 JavaScript 的作用域，作者用着非常生动的文字和拟人的手法，描述了 JavaScript 执行过程中：引擎、编译器和作用域分别扮演的不同角色与职责。<br>（思维导图单击可放大查看）</p><p><img src="/images/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.svg" alt="作用域思维导图.png"></p><h1 id="一、关于作用域"><a href="#一、关于作用域" class="headerlink" title="一、关于作用域"></a>一、关于作用域</h1><p>作用域几乎是所有编程语言最基本的功能之一，其基本功能就是储存变量中的值，并且能在之后对这个值进行访问或修改。</p><h1 id="二、编译原理"><a href="#二、编译原理" class="headerlink" title="二、编译原理"></a>二、编译原理</h1><hr><p>了解过编译原理的同学可能都会知道，大多数编程语言在执行前，一般要经过：词法分析、语法分析、代码优化、生成中间码或生成指定平台的 CPU 指令（这里对编译的流程的解释过于粗略，后面打算专门几篇文章来梳理编译原理）。</p><p>那么为什么我要简单聊一下编译过程呢？这就和 JavaScript 语言的特殊性息息相关了，我们通常把 JavaScript 认为是“解释型”语言，但归根结底它还是一门编译语言，只不过它的某些环节变的相当复杂。比如，它的构建过程是在执行前的几微秒内发生的（甚至更短），所以 JavaScript 引擎用尽各种方法（比如 JIT，可以延迟编译）来保证性能最佳。</p><p>简单来说，任何 JavaScript 代码片段在执行前都需要进行编译（通常就是在执行前）。那么你可能会问了，这个高深莫测的编译原理和我今天讨论的主题有什么关联呢？我们先怀揣着疑问，继续看下去。</p><h1 id="三、理解作用域"><a href="#三、理解作用域" class="headerlink" title="三、理解作用域"></a>三、理解作用域</h1><hr><h2 id="3-1-嘉宾表"><a href="#3-1-嘉宾表" class="headerlink" title="3.1 嘉宾表"></a>3.1 嘉宾表</h2><p>下面邀请出今晚最重要的三位嘉宾，它们分别是：引擎、编译器和作用域，掌声欢迎。</p><p>我叫引擎，执行 JavaScript 可少不了我的存在，我负责 JavaScript 编译、优化、执行的全过程。</p><p>我叫编译器，是引擎大哥的最重要的助手，在接到引擎大哥交给我的 JavaScript 代码片段之后，我会立刻将其转换成 AST（抽象语法树）。在把 AST 交给引擎大哥前，我还会与作用域先生（那个家伙脾气可不太好）一起协调确认作用域规则。</p><p>我叫作用域，是引擎的另一位好朋友，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则。不过我的脾气比较粗暴，因为编译器总是会问我，“你有没有见过变量 a ”、“你有没有见过函数 foo ”等之类的问题，通常如果我见过就会返回这个变量，如果从来没见过的话，就会给编译器脸色看（抛出一个异常）。</p><h2 id="3-2-引擎查找变量规则"><a href="#3-2-引擎查找变量规则" class="headerlink" title="3.2 引擎查找变量规则"></a>3.2 引擎查找变量规则</h2><p>在正式理解作用域之前，我们得先了解一下这个概念————编译器的 LHS RHS，也就是 JavaScript 是如何变量声明和赋值。</p><p>当出现赋值操作时，编译器会使用 LHS 方法沿着作用域链，从当前作用域到顶层作用域中挨个查询目标，如果一直没有找到该目标，则会抛出异常（ReferenceError）程序就不会再往下执行，请看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当引擎去执行这段代码的时候，其实分成了两步：<br>第一步：编译器在把代码转换成 AST 树后，引擎会为 a 当前所在的作用域内开辟一个名为 a 的容器（通常作用域在执行前确定）。<br>第二步：接着编译器会使用 LHS 规则去查找这个名为 a 的容器，最后给这个名为 a 的容器赋值。</p><p>当出现取值操作时，编译器会使用 RHS 方法沿着作用域链，从当前作用域到顶层作用域中挨个查询目标，如果一直没有找到该目标，则会跑出异常（ReferenceError）程序就不会再往下执行，请看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(a);</span><br></pre></td></tr></table></figure><p>从 <code>foo(a);</code> 这行代码开始，首先会按 RHS 规则查询 foo，如果查询成功，则继续查询 a，如果查询成功将 a 的值映射到 foo 函数的 arguments[0] ，于是执行 <code>console.log(b);</code>。其实这里的 <code>console.log</code> 也会按照 RHS 的规则查找当前作用域中是否存在 <code>console</code>，以此类推，继续查找 <code>console.log</code>;</p><h2 id="四、作用域嵌套"><a href="#四、作用域嵌套" class="headerlink" title="四、作用域嵌套"></a>四、作用域嵌套</h2><p>作用域还存在作用域嵌套的问题，比如 <code>foo</code> 就嵌套在全局作用域当中，<code>boo</code> 嵌套在 <code>foo</code> 的函数作用域中，我们看下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">boo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = b * <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  boo(a, b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(a);</span><br></pre></td></tr></table></figure><p>这段代码的执行结果最终是什么呢？答案是 <code>1, 3, 9</code>, 虽然 foo 函数内部和 boo 函数内部都有名称为 c 的变量名，但是根据作用域的规则，它总是取离他最近的那个变量。所以外层的 c 会被里层的 c 所覆盖。但是在严格模式下，这种行为不被允许。</p><h1 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h1><ul><li>通常作用域在 JavaScript 引擎执行代码片段前，且一经确认则不会再发生改变</li><li>作用域与 JavaScript 编译器的两种查询规则紧密配合： LHS、RHS</li><li>作用域存在作用域嵌套问题，变量同名的情况下，内部的优先级高于外部的优先级</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 工程配置</title>
      <link href="posts/TsConfig/"/>
      <url>posts/TsConfig/</url>
      
        <content type="html"><![CDATA[<h1 id="一、文件选项配置"><a href="#一、文件选项配置" class="headerlink" title="一、文件选项配置"></a>一、文件选项配置</h1><hr><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;./tsconfig.base.json&quot;</span>, <span class="comment">// 继承其他配置文件 可以被覆盖</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [<span class="string">&quot;src/a.ts&quot;</span>], <span class="comment">// 编译器需要编译的单个文件列表</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src&quot;</span>, <span class="comment">// 编译器只编译src下的文件（包含子目录）</span></span><br><span class="line">    <span class="string">&quot;src/*&quot;</span>, <span class="comment">// 编译器只编译src一级目录下的文件</span></span><br><span class="line">    <span class="string">&quot;src/*/*&quot;</span> <span class="comment">// 编译器只编译src下二级目录下的文件</span></span><br><span class="line">  ], <span class="comment">// 编译器需要编译的文件或目录（包含子目录）列表</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src/lib&quot;</span> <span class="comment">// 只排除src/lib所有文件</span></span><br><span class="line">  ], <span class="comment">// 编译器需要排除的文件或文件夹（默认排除node_module和其他声明文件）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;compileOnSave&quot;</span>: <span class="literal">true</span> <span class="comment">// 保存时自动编译（vscode尚未支持 2020.02.03）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、编译选项配置"><a href="#二、编译选项配置" class="headerlink" title="二、编译选项配置"></a>二、编译选项配置</h1><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;incremental&quot;</span>: <span class="literal">true</span>, <span class="comment">// 增量编译，提高编译速度</span></span><br><span class="line">    <span class="attr">&quot;tsBuildInfoFile&quot;</span>: <span class="string">&quot;./buildFile&quot;</span>, <span class="comment">// 增量编译文件的存储位置</span></span><br><span class="line">    <span class="attr">&quot;diagnostics&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印诊断信息</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>, <span class="comment">// 目标语言的版本</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>, <span class="comment">// 生成代码的模块标准</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;./app.js&quot;</span>, <span class="comment">// 将多个互相依赖的文件生成一个文件，可以用在 AMD 模块中</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es2019.array&quot;</span>, <span class="comment">// 导入此类库，可以使用高版本的语法</span></span><br><span class="line">    ], <span class="comment">// TS 需要引用的库，即声明文件，es5 默认 &quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许编译 JS 文件 （js、jsx）</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在 JS 文件中报错，通常与 allowJs 一起使用</span></span><br><span class="line">    &quot;outDir&quot;: &quot;./out&quot;,, // 指定输出目录</span><br><span class="line">    &quot;rootDir&quot;: &quot;./&quot;, // 指定输入文件目录（用于输出）</span><br><span class="line"></span><br><span class="line">    &quot;declaration&quot;: true, // 生成声明文件</span><br><span class="line">    &quot;declarationDir&quot;: &quot;./d&quot;, // 声明文件的路径</span><br><span class="line">    &quot;emitDeclarationOnly&quot;: true, // 只生成声明文件</span><br><span class="line">    &quot;sourceMap&quot;: true, // 生成目标文件的 sourceMap</span><br><span class="line">    &quot;inlineSourceMap&quot;: true, // 生成目标文件的 inline sourceMap</span><br><span class="line">    &quot;declarationMap&quot;: true, // 生成声明文件的 sourceMap</span><br><span class="line"></span><br><span class="line">    &quot;typeRoots&quot;: [], // 声明文件目录，默认 node_module/@types</span><br><span class="line">    &quot;types&quot;: [], // 只加载某个声明包文件列表</span><br><span class="line"></span><br><span class="line">    &quot;removeComments&quot;: true, // 删除注释</span><br><span class="line"></span><br><span class="line">    &quot;noEmit&quot;: true, // 不输出文件</span><br><span class="line">    &quot;noEmitOnError&quot;: true, // 发生错误时，不输出文件</span><br><span class="line">    &quot;noEmitHelpers&quot;: true, // 不生成 helper 函数，需额外安装 ts-helpers</span><br><span class="line">    &quot;importHelps&quot;: true, // 通过 tslib 引入 helper 函数，文件必须是模块</span><br><span class="line">    &quot;downlevelIteration&quot;: true, // 降级遍历器的实现（es3/5）</span><br><span class="line"></span><br><span class="line">    &quot;strict&quot;: true, // 开启所有严格的类型检查</span><br><span class="line">    &quot;alwaysStrict&quot;: false, // 在代码中主入 &quot;use strict&quot;</span><br><span class="line">    &quot;noImplicitAny&quot;: false, // 不允许隐式的 any 类型</span><br><span class="line">    &quot;strictNullChecks&quot;: false, // 不允许把 null、undefined 赋值给其他类型变量</span><br><span class="line">    &quot;strictPropertyInitalization&quot;: false, // 类实例属性必须 初始化</span><br><span class="line">    &quot;strictBindCallAppy&quot;: false, // 严格的 bind/call/apply 检查</span><br><span class="line">    &quot;noImplicitThis&quot;: false, // 不允许 this 有隐式的 any 类型</span><br><span class="line"></span><br><span class="line">    &quot;noUnuserLocals&quot;: true, // 检查只声明，未使用的局部变量</span><br><span class="line">    &quot;noUnusedParameters&quot;: true, //  检查未使用的函数参数</span><br><span class="line">    &quot;noFallthroughCasesInSwitch&quot;: true, // 防止 switch 语句贯穿</span><br><span class="line">    &quot;noImplicitReturns&quot;: true, // 每个分支都要有返回值</span><br><span class="line"></span><br><span class="line">    &quot;esMoudleInterop&quot;: true, // 允许 export = 导出，由 import from 导入</span><br><span class="line">    &quot;allowUmdGlobalAccess&quot;: true, // 允许在模块中放访问 UMD 全局变量</span><br><span class="line"></span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;, // 模块解析策略</span><br><span class="line">    &quot;baseUrl&quot;: &quot;./&quot;, // 解析非相对模块的基地址</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">        &quot;jquery&quot;: [&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;]</span><br><span class="line">    &#125;, // 为jquery指定一个精简的文件</span><br><span class="line"></span><br><span class="line">    &quot;rootDirs&quot;: [&quot;src&quot;, &quot;out&quot;], // 将多个目录放在一个虚拟目录下，用于运行时</span><br><span class="line"></span><br><span class="line">    &quot;listEmittedFiles&quot;: true, // 打印输出文件</span><br><span class="line">    &quot;listFiles&quot;: true, // 打印编译的文件（包括引用的声明文件）</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、工程引用"><a href="#三、工程引用" class="headerlink" title="三、工程引用"></a>三、工程引用</h1><hr><blockquote><p>场景：在一个代码仓库中，存放多个需要单独构建的工程。<br>例如一个全栈工程，有客户端和服务端，提取出共一些公用的代码，存放到一个公共文件夹下。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─src --------------------------------------------- &#x2F;&#x2F; 项目代码</span><br><span class="line">│ ├─client ---------------------------------------- &#x2F;&#x2F; 客户端</span><br><span class="line">│ │ ├─index.ts ------------------------------------ &#x2F;&#x2F; 客户端示例文件</span><br><span class="line">│ │ └─tsconfig.json ------------------------------- &#x2F;&#x2F; 客户端配置文件</span><br><span class="line">│ ├─common ---------------------------------------- &#x2F;&#x2F; 公共</span><br><span class="line">│ │ ├─index.ts ------------------------------------ &#x2F;&#x2F; 公共示例文件</span><br><span class="line">│ │ └─tsconfig.json ------------------------------- &#x2F;&#x2F; 公共配置文件</span><br><span class="line">│ ├─server ---------------------------------------- &#x2F;&#x2F; 服务端</span><br><span class="line">│ │  ├─index.ts ----------------------------------- &#x2F;&#x2F; 服务端示例文件</span><br><span class="line">│ │  └─tsconfig.json ------------------------------ &#x2F;&#x2F; 服务端配置文件</span><br><span class="line">├─test -------------------------------------------- &#x2F;&#x2F; 测试用例</span><br><span class="line">│ ├─client.test.ts -------------------------------- &#x2F;&#x2F; 客户端测试用例</span><br><span class="line">│ ├─server.test.ts -------------------------------- &#x2F;&#x2F; 服务端测试用例</span><br><span class="line">│ └─tsconfig.json --------------------------------- &#x2F;&#x2F; 测试用例配置文件</span><br><span class="line">└─tsconfig.json ------------------------------------&#x2F;&#x2F; 整个项目的配置</span><br></pre></td></tr></table></figure><h2 id="3-1-整个项目的配置"><a href="#3-1-整个项目的配置" class="headerlink" title="3.1 整个项目的配置"></a>3.1 整个项目的配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;composit&quot;</span>: <span class="literal">true</span>, <span class="comment">// 工程可以被引用，可以增量编译</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-客户端配置文件"><a href="#3-2-客户端配置文件" class="headerlink" title="3.2 客户端配置文件"></a>3.2 客户端配置文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;../../tsconfig.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;../../dist/client&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;references&quot;</span>: [&#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;../common&quot;</span> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-服务端配置文件"><a href="#3-3-服务端配置文件" class="headerlink" title="3.3 服务端配置文件"></a>3.3 服务端配置文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;../../tsconfig.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;../../dist/server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;references&quot;</span>: [&#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;../common&quot;</span> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-测试用例配置文件"><a href="#3-4-测试用例配置文件" class="headerlink" title="3.4 测试用例配置文件"></a>3.4 测试用例配置文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;../tsconfig.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;references&quot;</span>: [&#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;../src/client&quot;</span> &#125;, &#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;../src/server&quot;</span> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-构建"><a href="#3-5-构建" class="headerlink" title="3.5 构建"></a>3.5 构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tsc -b src/client --verbose // 构建客户端</span><br><span class="line">tsc -b src/server --verbose // 构建服务端</span><br><span class="line"></span><br><span class="line">tsc -b <span class="built_in">test</span> --clean // 清空构建的文件</span><br></pre></td></tr></table></figure><h2 id="3-6-工程引用优点"><a href="#3-6-工程引用优点" class="headerlink" title="3.6 工程引用优点"></a>3.6 工程引用优点</h2><ul><li>解决输出目录结构的问题</li><li>解决了单个工程构建的问题</li><li>通过增量编译提高编译速度</li></ul><h1 id="四、编译工具"><a href="#四、编译工具" class="headerlink" title="四、编译工具"></a>四、编译工具</h1><hr><h2 id="4-1-如何选择-TypeScript-编译工具？"><a href="#4-1-如何选择-TypeScript-编译工具？" class="headerlink" title="4.1 如何选择 TypeScript 编译工具？"></a>4.1 如何选择 TypeScript 编译工具？</h2><ol><li>如果没有使用过 Babel，首选 TypeScript 自生的编译器（可配合 ts-loader 使用）</li><li>如果项目中已经使用了 Babel，安装 @bable/preset-typescript（可配合 tsc 做类型检查）</li><li>两种编译工具不要混用</li></ol><h2 id="4-2-ts-loader（推荐）"><a href="#4-2-ts-loader（推荐）" class="headerlink" title="4.2 ts-loader（推荐）"></a>4.2 ts-loader（推荐）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.config.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ForkTsCheckerWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;fork-ts-checker-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&quot;./src/class.ts&quot;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.tsx&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              transpileOnly: <span class="literal">false</span>, <span class="comment">// 为true时只做语言转换，不做类型检查（编译时无法发现错误，需要借助第三方插件：fork-ts-checker-webpack-plugin）</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&quot;./src/tpl/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ForkTsCheckerWebpackPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-3-awesome-typescript-loader（不推荐）"><a href="#4-3-awesome-typescript-loader（不推荐）" class="headerlink" title="4.3 awesome-typescript-loader（不推荐）"></a>4.3 awesome-typescript-loader（不推荐）</h2><blockquote><p>与 ts-loader 的主要区别：</p><ol><li>更适合与 Babel 集成，使用 Babel 的转义和缓存</li><li>不需要安装额外的插件，就可以把类型检查放在独立进程中进行</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CheckerPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;awesome-typescript-loader&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&quot;./src/class.ts&quot;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.tsx&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&quot;awesome-typescript-loader&quot;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              transpileOnly: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&quot;./src/tpl/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CheckerPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-4-Babel-7"><a href="#4-4-Babel-7" class="headerlink" title="4.4 Babel 7+"></a>4.4 Babel 7+</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ts-babel-leaning&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;babel src --out-dir dist --extensions \&quot;.ts,.tsx\&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type-check&quot;</span>: <span class="string">&quot;tsc --watch&quot;</span> <span class="comment">// 需要单独开启一个线程，执行ts类型检查</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@babel/cli&quot;</span>: <span class="string">&quot;^7.8.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.8.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/plugin-proposal-class-properties&quot;</span>: <span class="string">&quot;^7.8.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/plugin-proposal-object-rest-spread&quot;</span>: <span class="string">&quot;^7.8.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.8.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-typescript&quot;</span>: <span class="string">&quot;^7.8.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^3.7.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span> <span class="comment">// 与 Babel 混用时，此选项请开启</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-1-Babel-与-TypeScript-两者结合"><a href="#4-4-1-Babel-与-TypeScript-两者结合" class="headerlink" title="4.4.1 Babel 与 TypeScript 两者结合"></a>4.4.1 Babel 与 TypeScript 两者结合</h3><blockquote><p>Babel 只做语言转换<br>TypeScript 只做类型检查</p></blockquote><h3 id="4-4-2-在-Babel-中使用-TypeScript-的注意事项"><a href="#4-4-2-在-Babel-中使用-TypeScript-的注意事项" class="headerlink" title="4.4.2 在 Babel 中使用 TypeScript 的注意事项"></a>4.4.2 在 Babel 中使用 TypeScript 的注意事项</h3><ol><li>命名空间在 Babel 中编译会报错，不要使用</li><li>类型断言写法使用 as</li><li>常量枚举，编译报错</li><li>默认导出，编译报错</li></ol><h1 id="五、代码检查工具"><a href="#五、代码检查工具" class="headerlink" title="五、代码检查工具"></a>五、代码检查工具</h1><hr><h2 id="5-1-ESLint"><a href="#5-1-ESLint" class="headerlink" title="5.1 ESLint"></a>5.1 ESLint</h2><p><img src="https://i.loli.net/2020/06/26/Gp2QmlDX7uWIzKV.jpg" alt="ESLint.jpg"></p><p><img src="https://i.loli.net/2020/06/26/AagbK6kjqeBI9FV.jpg" alt="ESLint.jpg"></p><p><img src="https://i.loli.net/2020/06/26/HfmKGColOe4rAwJ.jpg" alt="ESLint.jpg"></p><h2 id="5-2-如何在-TypesSript-中使用-ESLint"><a href="#5-2-如何在-TypesSript-中使用-ESLint" class="headerlink" title="5.2 如何在 TypesSript 中使用 ESLint"></a>5.2 如何在 TypesSript 中使用 ESLint</h2><h3 id="5-2-1-安装-ESLint-模块"><a href="#5-2-1-安装-ESLint-模块" class="headerlink" title="5.2.1 安装 ESLint 模块"></a>5.2.1 安装 ESLint 模块</h3><h4 id="在-package-json-文件中"><a href="#在-package-json-文件中" class="headerlink" title="在 package.json 文件中"></a>在 package.json 文件中</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint src --ext .js,.ts&quot;</span> <span class="comment">// 检查 .js .ts 文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/eslint-plugin&quot;</span>: <span class="string">&quot;^2.19.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span>: <span class="string">&quot;^2.19.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-eslintrc-json-文件中"><a href="#在-eslintrc-json-文件中" class="headerlink" title="在 .eslintrc.json 文件中"></a>在 .eslintrc.json 文件中</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [<span class="string">&quot;@typescript-eslint&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;project&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: [<span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/no-inferrable-types&quot;</span>: <span class="string">&quot;off&quot;</span> <span class="comment">// 关闭禁止显示的声明ts类型</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-安装-VSCode-ESLint-插件"><a href="#5-2-2-安装-VSCode-ESLint-插件" class="headerlink" title="5.2.2 安装 VSCode ESLint 插件"></a>5.2.2 安装 VSCode ESLint 插件</h3><h4 id="在-setting-json-文件中"><a href="#在-setting-json-文件中" class="headerlink" title="在 setting.json 文件中"></a>在 setting.json 文件中</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-babel-eslint-与-typescript-eslint"><a href="#5-3-babel-eslint-与-typescript-eslint" class="headerlink" title="5.3 babel-eslint 与 typescript-eslint"></a>5.3 babel-eslint 与 typescript-eslint</h2><ul><li>babel-eslint: 支持 TypeScript 没有的额外的语法检查，抛弃 TypeScript，不支持类型检查</li><li>typescript-eslint：基于 TypeScript 的 AST，支持创建基于类型信息的规则（tsconfig.json）</li></ul><p><strong>建议：</strong></p><ul><li>两者底层机制不一样，不要一起使用</li><li>Babel 体系建议使用 babel-eslint，否则就可以使用 typescript-eslint</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 基础语法</title>
      <link href="posts/Ts/"/>
      <url>posts/Ts/</url>
      
        <content type="html"><![CDATA[<h1 id="一、开始一个项目"><a href="#一、开始一个项目" class="headerlink" title="一、开始一个项目"></a>一、开始一个项目</h1><h2 id="1-1-安装模块"><a href="#1-1-安装模块" class="headerlink" title="1.1 安装模块"></a>1.1 安装模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装 ts</span></span><br><span class="line">npm i -g typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化ts配置文件</span></span><br><span class="line">tsc --init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 webpack</span></span><br><span class="line">npm i webpack webpack-cli webpack-dev-server -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ts-loader 再次在当前项目中安装 typescript</span></span><br><span class="line">npm i ts-loader typescript -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装  html-webpack-plugin 当使用 webpack打包时，创建一个 html 文件，并把 webpack 打包后的静态文件自动插入到这个 html 文件当中。</span></span><br><span class="line">npm install html-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 clean-webpack-plugin -D 可以帮助我们清空打包时产生的无用文件</span></span><br><span class="line">npm i clean-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 webpack-merge -D 可以帮助我们合并多个文件</span></span><br><span class="line">npm i webpack-merge -D</span><br></pre></td></tr></table></figure><h2 id="1-2-配置-package-json"><a href="#1-2-配置-package-json" class="headerlink" title="1.2 配置 package.json"></a>1.2 配置 package.json</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack-dev-server --mode=development --config ./build/webpack.config.js&quot;, // 开发环境启动脚本</span><br><span class="line">  &quot;build&quot;: &quot;webpack --mode=product --config ./build/webpack.config.js&quot; // 构建生产环境脚本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、对比-TS-数据类型与-ES6-数据类型"><a href="#二、对比-TS-数据类型与-ES6-数据类型" class="headerlink" title="二、对比 TS 数据类型与 ES6 数据类型"></a>二、对比 TS 数据类型与 ES6 数据类型</h1><hr><table><thead><tr><th>ES6 的数据类型</th><th>TypeScript 的数据类型</th></tr></thead><tbody><tr><td>Boolean</td><td>Boolean</td></tr><tr><td>Number</td><td>Number</td></tr><tr><td>String</td><td>String</td></tr><tr><td>Array</td><td>Array</td></tr><tr><td>Function</td><td>Function</td></tr><tr><td>Object</td><td>Object</td></tr><tr><td>Symbol</td><td>Symbol</td></tr><tr><td>undefined</td><td>undefined</td></tr><tr><td>null</td><td>null</td></tr><tr><td></td><td><strong>void</strong></td></tr><tr><td></td><td><strong>any</strong></td></tr><tr><td></td><td><strong>never</strong></td></tr><tr><td></td><td><strong>元组</strong></td></tr><tr><td></td><td><strong>枚举</strong></td></tr><tr><td></td><td><strong>高级类型</strong></td></tr></tbody></table><h1 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h1><hr><h2 id="3-1-基本类型"><a href="#3-1-基本类型" class="headerlink" title="3.1 基本类型"></a>3.1 基本类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始类型</span></span><br><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 只能存number</span></span><br><span class="line"><span class="comment">// 泛型：联合类型 可以存 number 和 string</span></span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;4&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组 只能存放 两个类型一致的元素（实际开发中不建议使用）</span></span><br><span class="line"><span class="keyword">let</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">0</span>, <span class="string">&quot;1&quot;</span>];</span><br><span class="line">tuple.push(<span class="number">2</span>); <span class="comment">// [0, &quot;1&quot;, 2]</span></span><br><span class="line">tuple[<span class="number">2</span>]; <span class="comment">//  ERROR：无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">let</span> add = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y;</span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="keyword">let</span> compute: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line">obj.x = <span class="number">3</span>; <span class="comment">//  ERROR：不能分配属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line">obj.x = <span class="number">3</span>; <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">let</span> s1: symbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2); <span class="comment">// fasle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined, null</span></span><br><span class="line"><span class="keyword">let</span> un: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> empty: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">un = <span class="number">3</span>; <span class="comment">// 不允许</span></span><br><span class="line">empty = <span class="number">3</span>; <span class="comment">// 不允许</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void 避免 undefined值被污染</span></span><br><span class="line"><span class="comment">// js中 undefined 可以被设置为一个指定的值</span></span><br><span class="line"><span class="keyword">let</span> noReturn = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// any</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">x = [];</span><br><span class="line">x = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// never</span></span><br><span class="line"><span class="comment">// 永远不会返回</span></span><br><span class="line"><span class="keyword">let</span> error = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> endless = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-2-枚举类型"><a href="#3-2-枚举类型" class="headerlink" title="3.2 枚举类型"></a>3.2 枚举类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字枚举</span></span><br><span class="line"><span class="built_in">enum</span> Role &#123;</span><br><span class="line">  Developer = <span class="number">1</span>,</span><br><span class="line">  Guest,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Role.Developer); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Role); <span class="comment">// &#123; &quot;Developer&quot;: 1, &quot;Guest&quot;: 2, 1: &quot;Developer&quot;, 2: &quot;Guest&quot;&#125;</span></span><br><span class="line">Role.Guest = <span class="number">3</span>; <span class="comment">//  ERROR：无法修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串枚举</span></span><br><span class="line"><span class="built_in">enum</span> Message &#123;</span><br><span class="line">  Success = <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  Fail = <span class="string">&quot;失败&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异构枚举（不建议使用）</span></span><br><span class="line"><span class="built_in">enum</span> Answer &#123;</span><br><span class="line">  N = <span class="number">1</span>,</span><br><span class="line">  Y = <span class="string">&quot;yes&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举成员</span></span><br><span class="line"><span class="built_in">enum</span> Char &#123;</span><br><span class="line">  a = <span class="number">1</span>,</span><br><span class="line">  b = Char.a,</span><br><span class="line">  c = <span class="number">1</span> + <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">  d = <span class="built_in">Math</span>.random(),</span><br><span class="line">  e = <span class="string">&quot;123&quot;</span>.length,</span><br><span class="line">  f, <span class="comment">//  ERROR：必须具有初始值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量枚举</span></span><br><span class="line"><span class="comment">// 不需要枚举对象，而只需要使用枚举对象的值时候，可以使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Month &#123;</span><br><span class="line">  Jan,</span><br><span class="line">  Feb,</span><br><span class="line">  Mar,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="built_in">enum</span> E &#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> F &#123;</span><br><span class="line">  a = <span class="number">0</span>,</span><br><span class="line">  b = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> G &#123;</span><br><span class="line">  A = <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">  b = <span class="string">&quot;banana&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e: E = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> f: F = <span class="number">3</span>;</span><br><span class="line">e === f; <span class="comment">//  ERROR：不同枚举类型不可比较</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e1: E.a;</span><br><span class="line"><span class="keyword">let</span> e2: E.b;</span><br><span class="line">e1 === e2; <span class="comment">// ERROR：不同枚举类型不可比较</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e3: E.a = <span class="number">1</span>;</span><br><span class="line">e1 === e3; <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g1: G = G.b;</span><br><span class="line"><span class="keyword">let</span> g2: G.a = G.a;</span><br></pre></td></tr></table></figure><h2 id="3-3-接口类型"><a href="#3-3-接口类型" class="headerlink" title="3.3 接口类型"></a>3.3 接口类型</h2><h3 id="3-3-1-对象类型接口"><a href="#3-3-1-对象类型接口" class="headerlink" title="3.3.1 对象类型接口"></a>3.3.1 对象类型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口 List</span></span><br><span class="line"><span class="keyword">interface</span> List &#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口 Result</span></span><br><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">  data: List[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">result: Result</span>) </span>&#123;</span><br><span class="line">  result.data.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.id, value.name);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;, <span class="comment">// 增加的 sex 不会报错，符合鸭式变形法</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render(result);</span><br></pre></td></tr></table></figure><h4 id="3-3-1-1-鸭式变形法"><a href="#3-3-1-1-鸭式变形法" class="headerlink" title="3.3.1.1 鸭式变形法"></a>3.3.1.1 鸭式变形法</h4><blockquote><p>只要传入的数据格式满足接口定义的必要条件也是可以允许的。</p></blockquote><p>当然也有例外，请看下面：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render(&#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;); <span class="comment">// ERROR：如果直接传入对象自变量，TS则会对额外的字段进行类型检查</span></span><br></pre></td></tr></table></figure><h4 id="3-3-1-2-有三种绕过方式"><a href="#3-3-1-2-有三种绕过方式" class="headerlink" title="3.3.1.2 有三种绕过方式"></a>3.3.1.2 有三种绕过方式</h4><ol><li>加类型断言</li><li>用变量传递</li><li>索引签名</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1 加类型断言</span></span><br><span class="line">render(&#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125; <span class="keyword">as</span> Result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 用变量传递</span></span><br><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line">render(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 索引签名</span></span><br><span class="line"><span class="keyword">interface</span> List &#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  [x: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 含义，用任意的字符串去索引 List，这样可以支持多个属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-3-假设有个新需求"><a href="#3-3-1-3-假设有个新需求" class="headerlink" title="3.3.1.3 假设有个新需求"></a>3.3.1.3 假设有个新需求</h4><blockquote><p>需要判断一个对象中是否有一个新字段（age），如果有则打印出来</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口 List</span></span><br><span class="line"><span class="keyword">interface</span> List &#123;</span><br><span class="line">  <span class="keyword">readonly</span> id: <span class="built_in">number</span>; <span class="comment">// 含义，只读，不可修改</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 含义，可选属性，这个属性可以有也可以没有</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口 Result</span></span><br><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">  data: List[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">result: Result</span>) </span>&#123;</span><br><span class="line">  result.data.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.id, value.name);</span><br><span class="line">    <span class="keyword">if</span> (value.age) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value.age);</span><br><span class="line">    &#125;</span><br><span class="line">    value.id++; <span class="comment">// 报错，不可修改</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render(result);</span><br></pre></td></tr></table></figure><h4 id="3-3-1-3-索引签名"><a href="#3-3-1-3-索引签名" class="headerlink" title="3.3.1.3 索引签名"></a>3.3.1.3 索引签名</h4><blockquote><p>我们可以明确的指定索引签名。例如：假设你想确认存储在对象中任何内容都符合  { message: string }  的结构，你可以通过  [index: string]: { message: string }  来实现。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> foo &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: &#123; <span class="attr">message</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 储存的东西必须符合结构 ok</span></span><br><span class="line">foo[<span class="string">&quot;a&quot;</span>] = &#123; <span class="attr">message</span>: <span class="string">&quot;some message&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ERROR：必须包含 `message`</span></span><br><span class="line">foo[<span class="string">&quot;a&quot;</span>] = &#123; <span class="attr">abc</span>: <span class="string">&quot;some message&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>tip：</strong></p><blockquote><p>[index: string]: { message: string }; 里的  index 除了可读性外，并没有任何意义。例如：如果有一个用户名，你可以使用  { username: string}: { message: string }，这有利于下一个开发者理解你的代码。</p></blockquote><p>节选自：<a href="https://jkchao.github.io/typescript-book-chinese/typings/indexSignatures.html#typescript-%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D">深入理解 TypeScript - 索引签名</a></p><h3 id="3-3-2-函数类型接口"><a href="#3-3-2-函数类型接口" class="headerlink" title="3.3.2 函数类型接口"></a>3.3.2 函数类型接口</h3><h4 id="3-3-2-1-声明"><a href="#3-3-2-1-声明" class="headerlink" title="3.3.2.1 声明"></a>3.3.2.1 声明</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数的四种方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量定义函数类型</span></span><br><span class="line"><span class="keyword">let</span> add: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义函数类型</span></span><br><span class="line"><span class="keyword">interface</span> Add &#123;</span><br><span class="line">  (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名定义函数类型</span></span><br><span class="line"><span class="keyword">type</span> Add = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">let</span> add: Add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-2-可选参数"><a href="#3-3-2-2-可选参数" class="headerlink" title="3.3.2.2 可选参数"></a>3.3.2.2 可选参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> y ? x + y : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ERROR：必选参数不能位于可选参数之后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span>, z: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> y ? x + y : x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-3-默认值"><a href="#3-3-2-3-默认值" class="headerlink" title="3.3.2.3 默认值"></a>3.3.2.3 默认值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y = <span class="number">0</span>, z: <span class="built_in">number</span>, q = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> y + x + z + q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-4-剩余参数"><a href="#3-3-2-4-剩余参数" class="headerlink" title="3.3.2.4 剩余参数"></a>3.3.2.4 剩余参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, ...rest: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    x +</span><br><span class="line">    rest.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> pre + cur;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-5-函数重载"><a href="#3-3-2-5-函数重载" class="headerlink" title="3.3.2.5 函数重载"></a>3.3.2.5 函数重载</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">number</span>[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">string</span>[]</span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">any</span>[]</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> first = rest[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rest.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rest.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)); <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-类"><a href="#3-4-类" class="headerlink" title="3.4 类"></a>3.4 类</h2><h3 id="3-4-1-基本知识"><a href="#3-4-1-基本知识" class="headerlink" title="3.4.1 基本知识"></a>3.4.1 基本知识</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  name: <span class="built_in">string</span>; <span class="comment">// 必须在构造函数中被初始化，默认 public</span></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">pri</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="title">pro</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">readonly</span> legs: <span class="built_in">number</span> = <span class="number">4</span>; <span class="comment">// 只读，必须给初始值</span></span><br><span class="line">  <span class="keyword">static</span> food: <span class="built_in">string</span> = <span class="string">&quot;bones&quot;</span>; <span class="comment">// 只能通过类名调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化 Dog</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;wangwang&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line">dog.pri(); <span class="comment">// ERROR：无法调用私有属性</span></span><br><span class="line">dog.pro(); <span class="comment">// ERROR: 无法调用</span></span><br><span class="line"><span class="built_in">console</span>.log(Dog.food); <span class="comment">// &#x27;bones&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Husky</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, color: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">// 必须加上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// this 必须在 super 之后调用</span></span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">    <span class="built_in">this</span>.pri(); <span class="comment">// ERROR：无法调用私有属性</span></span><br><span class="line">    <span class="built_in">this</span>.pro(); <span class="comment">// OK</span></span><br><span class="line">  &#125;</span><br><span class="line">  color: <span class="built_in">string</span>; <span class="comment">// 默认 public</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Husky.food); <span class="comment">// &#x27;bones&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>构造函数设置为 protected，说明这个类只能被继承，而不能被实例化。<br>构造函数设置为 private，说明这个类不能被继承，不能被实例化。</p></blockquote><h3 id="3-4-2-抽象类——多态特性"><a href="#3-4-2-抽象类——多态特性" class="headerlink" title="3.4.2 抽象类——多态特性"></a>3.4.2 抽象类——多态特性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> sleep(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let animal = new Animal(); // Error：无法实例化</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;dog sleep&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;cat sleep&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;wangcai&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">&quot;dema&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animals: Animal[] = [dog, cat];</span><br><span class="line">animals.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">  i.sleep();</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * dog sleep</span></span><br><span class="line"><span class="comment">   * cat sleep</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-4-3-链式调用"><a href="#3-4-3-链式调用" class="headerlink" title="3.4.3 链式调用"></a>3.4.3 链式调用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkFlow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">step1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">step2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> WorkFlow().step1().step2(); <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFlow</span> <span class="keyword">extends</span> <span class="title">WorkFlow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyFlow().next().step1().step2(); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h2 id="3-5-类与接口的关系"><a href="#3-5-类与接口的关系" class="headerlink" title="3.5 类与接口的关系"></a>3.5 类与接口的关系</h2><p><img src="https://i.loli.net/2020/06/26/doJnDwsM3qIr7O1.jpg" alt="类与接口的关系.jpg"></p><h3 id="3-5-1-接口只能约束类的公有成员"><a href="#3-5-1-接口只能约束类的公有成员" class="headerlink" title="3.5.1 接口只能约束类的公有成员"></a>3.5.1 接口只能约束类的公有成员</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asian</span> <span class="title">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125; <span class="comment">// 必须实现</span></span><br><span class="line">  <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span> &#123;&#125; <span class="comment">// 必须实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-一个类类型接口可以继承多个接口"><a href="#3-5-2-一个类类型接口可以继承多个接口" class="headerlink" title="3.5.2 一个类类型接口可以继承多个接口"></a>3.5.2 一个类类型接口可以继承多个接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Man <span class="keyword">extends</span> Human &#123;</span><br><span class="line">  run(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Child &#123;</span><br><span class="line">  cry(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Boy <span class="keyword">extends</span> Man, Child &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> boy: Boy = &#123;</span><br><span class="line">  name: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">cry</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-接口继承类"><a href="#3-5-3-接口继承类" class="headerlink" title="3.5.3 接口继承类"></a>3.5.3 接口继承类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auto</span> </span>&#123;</span><br><span class="line">  state = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> AutoInterface <span class="keyword">extends</span> Auto &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">implements</span> <span class="title">AutoInterface</span> </span>&#123;</span><br><span class="line">  state = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h1><hr><h2 id="4-1-泛型函数与泛型接口"><a href="#4-1-泛型函数与泛型接口" class="headerlink" title="4.1 泛型函数与泛型接口"></a>4.1 泛型函数与泛型接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log&lt;<span class="built_in">string</span>[]&gt;([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]);</span><br><span class="line">log([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line"><span class="keyword">type</span> Log = &lt;T&gt;<span class="function">(<span class="params">value: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型接口定义</span></span><br><span class="line"><span class="keyword">interface</span> Log&lt;T = string&gt; &#123;</span><br><span class="line">  (value: T): T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-泛型类与泛型约束"><a href="#4-2-泛型类与泛型约束" class="headerlink" title="4.2 泛型类与泛型约束"></a>4.2 泛型类与泛型约束</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params">value: T</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定number类型</span></span><br><span class="line"><span class="keyword">let</span> log1 = <span class="keyword">new</span> Log&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">log1.run(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定string类型</span></span><br><span class="line"><span class="keyword">let</span> log2 = <span class="keyword">new</span> Log&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">log2.run(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不指定类型</span></span><br><span class="line"><span class="keyword">let</span> log2 = <span class="keyword">new</span> Log();</span><br><span class="line">log2.run(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">log2.run(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> Length &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承Length，只能传入有length的属性的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Length</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, value.length);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log([<span class="number">1</span>]);</span><br><span class="line">log(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">log(&#123; <span class="attr">length</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="4-3-泛型的好处"><a href="#4-3-泛型的好处" class="headerlink" title="4.3 泛型的好处"></a>4.3 泛型的好处</h2><ol><li>函数和类可以轻松地支持多种类型，增强程序的拓展性</li><li>不必写多条函数重载，冗长的联合类型声明，增强代码可读性</li><li>灵活控制类型之前的约束</li></ol><h1 id="五、类型检查机制"><a href="#五、类型检查机制" class="headerlink" title="五、类型检查机制"></a>五、类型检查机制</h1><hr><h2 id="5-1-自动类型推断"><a href="#5-1-自动类型推断" class="headerlink" title="5.1 自动类型推断"></a>5.1 自动类型推断</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 自动推断a为number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="literal">null</span>]; <span class="comment">// 自动推断 b 为 []any</span></span><br></pre></td></tr></table></figure><h2 id="5-2-类型兼容性"><a href="#5-2-类型兼容性" class="headerlink" title="5.2 类型兼容性"></a>5.2 类型兼容性</h2><h5 id="当一个类型-Y-可以被赋值给另一个类型-X-时，我们就可以说类型-X-兼容类型-Y-X-兼容-Y-X-目标类型-Y（源类型）"><a href="#当一个类型-Y-可以被赋值给另一个类型-X-时，我们就可以说类型-X-兼容类型-Y-X-兼容-Y-X-目标类型-Y（源类型）" class="headerlink" title="当一个类型 Y 可以被赋值给另一个类型 X 时，我们就可以说类型 X 兼容类型 Y X 兼容 Y : X (目标类型) = Y（源类型）"></a>当一个类型 Y 可以被赋值给另一个类型 X 时，我们就可以说类型 X 兼容类型 Y X 兼容 Y : X (目标类型) = Y（源类型）</h5><h5 id="口诀："><a href="#口诀：" class="headerlink" title="口诀："></a>口诀：</h5><ol><li>结构之间兼容：成员少的兼容成员多的</li><li>函数之间兼容：参数多的兼容参数少的</li></ol><h3 id="5-2-1-变量兼容性"><a href="#5-2-1-变量兼容性" class="headerlink" title="5.2.1 变量兼容性"></a>5.2.1 变量兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: <span class="built_in">string</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">s = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-接口兼容性"><a href="#5-2-2-接口兼容性" class="headerlink" title="5.2.2 接口兼容性"></a>5.2.2 接口兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口兼容性</span></span><br><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">  a: <span class="built_in">any</span>;</span><br><span class="line">  b: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Y &#123;</span><br><span class="line">  a: <span class="built_in">any</span>;</span><br><span class="line">  b: <span class="built_in">any</span>;</span><br><span class="line">  c: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: X = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> y: Y = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line">x = y; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// y = x; // Error 不兼容</span></span><br></pre></td></tr></table></figure><blockquote><p>结论：属性少的兼容属性多的</p></blockquote><h3 id="5-2-3-函数兼容性"><a href="#5-2-3-函数兼容性" class="headerlink" title="5.2.3 函数兼容性"></a>5.2.3 函数兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 结论：参数多的兼容参数少的</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数兼容性</span></span><br><span class="line"><span class="keyword">type</span> Handler = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hor</span>(<span class="params">handler: Handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 参数个数</span></span><br><span class="line"><span class="keyword">let</span> handler1 = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">hor(hander1);</span><br><span class="line"><span class="keyword">let</span> handler2 = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// hor(handler2); // Error 超出形参个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 可选参数和剩余参数</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="function">(<span class="params">p1: <span class="built_in">number</span>, p2: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> b = <span class="function">(<span class="params">p1?: <span class="built_in">number</span>, p2?: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> c = <span class="function">(<span class="params">...args: <span class="built_in">number</span>[]</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">a = b; <span class="comment">// OK</span></span><br><span class="line">a = c; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// b = c; // Error</span></span><br><span class="line"><span class="comment">// b = a; // Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过修改 tsconfig.json &gt;&gt; &quot;strictFunctionTypes&quot;: false</span></span><br><span class="line">b = c; <span class="comment">// OK</span></span><br><span class="line">b = a; <span class="comment">// OK</span></span><br><span class="line">c = a; <span class="comment">// OK</span></span><br><span class="line">c = b; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 参数类型</span></span><br><span class="line"><span class="keyword">let</span> handler3 = <span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// hor(handler3); // Error 类型不匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point2D &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Point3D &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p2d = <span class="function">(<span class="params">point: Point2D</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> p3d = <span class="function">(<span class="params">point: Point3D</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">p3d = p2d; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// p2d = p3d: // Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过修改 tsconfig.json &gt;&gt; &quot;strictFunctionTypes&quot;: false</span></span><br><span class="line">p2d = p3d: <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 返回值类型</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">() =&gt;</span> (&#123;<span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> g = <span class="function">() =&gt;</span> (&#123;<span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span>&#125;);</span><br><span class="line">f = g;</span><br><span class="line"><span class="comment">// g = f; // Error 不满足</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数重载兼容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>): <span class="title">any</span></span>;</span><br></pre></td></tr></table></figure><h3 id="5-2-4-枚举兼容性"><a href="#5-2-4-枚举兼容性" class="headerlink" title="5.2.4 枚举兼容性"></a>5.2.4 枚举兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举兼容性</span></span><br><span class="line"><span class="built_in">enum</span> Fruit &#123;</span><br><span class="line">  Apple,</span><br><span class="line">  Banana,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Yellow,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fruit: Fruit.Apple = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> no: <span class="built_in">number</span> = Fruit.Apple;</span><br><span class="line"><span class="comment">// let color: Color.Red = Fruit.Apple; // Error 不兼容</span></span><br></pre></td></tr></table></figure><h3 id="5-2-5-类兼容性"><a href="#5-2-5-类兼容性" class="headerlink" title="5.2.5 类兼容性"></a>5.2.5 类兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类兼容性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">p: <span class="built_in">number</span>, q: <span class="built_in">number</span></span>)</span> &#123;&#125;</span><br><span class="line">    id: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> s = <span class="number">1</span></span><br><span class="line">    <span class="title">constructor</span>(<span class="params">p: <span class="built_in">number</span> &#123;&#125;</span></span><br><span class="line"><span class="params">    id: <span class="built_in">number</span> = <span class="number">2</span></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">let</span> aa = <span class="keyword">new</span> A(<span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="params"><span class="keyword">let</span> bb = <span class="keyword">new</span> B(<span class="number">1</span>);</span></span><br><span class="line"><span class="params">aa = bb;</span></span><br><span class="line"><span class="params">bb = aa;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 类中含有私有成员，互相不兼容</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">p: <span class="built_in">number</span>, q: <span class="built_in">number</span></span>)</span> &#123;&#125;</span><br><span class="line">    id: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> s = <span class="number">1</span></span><br><span class="line">    <span class="title">constructor</span>(<span class="params">p: <span class="built_in">number</span> &#123;&#125;</span></span><br><span class="line"><span class="params">    id: <span class="built_in">number</span> = <span class="number">2</span></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> name: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">let</span> aa = <span class="keyword">new</span> A(<span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="params"><span class="keyword">let</span> bb = <span class="keyword">new</span> B(<span class="number">1</span>);</span></span><br><span class="line"><span class="params"><span class="comment">// aa = bb; // Error</span></span></span><br><span class="line"><span class="params"><span class="comment">// bb = aa; // Error</span></span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"><span class="keyword">class</span> C <span class="keyword">extends</span> A &#123;&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">let</span> cc = <span class="keyword">new</span> C(<span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="params">aa = cc;</span></span><br><span class="line"><span class="params">cc = aa;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-6-泛型兼容性"><a href="#5-2-6-泛型兼容性" class="headerlink" title="5.2.6 泛型兼容性"></a>5.2.6 泛型兼容性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> Empty&lt;T&gt; &#123;</span><br><span class="line">  value: T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1: Empty&lt;<span class="built_in">number</span>&gt; = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2: Empty&lt;<span class="built_in">string</span>&gt; = &#123;&#125;;</span><br><span class="line"><span class="comment">// obj1 = obj2; // Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型函数</span></span><br><span class="line"><span class="keyword">let</span> log1 = &lt;T&gt;(x: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> log2 = &lt;U&gt;(y: U): <span class="function"><span class="params">U</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">log1 = log2;</span><br></pre></td></tr></table></figure><h2 id="5-3-类型保护机制"><a href="#5-3-类型保护机制" class="headerlink" title="5.3 类型保护机制"></a>5.3 类型保护机制</h2><p>TypeScript 能够在特定的区块中保证变量属于某种确定的类型。<br>可以在此区块中放心地引用此类型的属性，或调用此类型的方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Type &#123; Strong, Week &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Java</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">helloJava</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello java&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    java: <span class="built_in">any</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">JavaScript</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">helloJavaScript</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello JavaScript&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    javascript: <span class="built_in">any</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4. 类型保护函数</span></span><br><span class="line"> <span class="comment">// 返回值类型 =&gt; “lang is Java” 叫做：类型谓词</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isJava</span>(<span class="params">lang: Java | JavaScript</span>): <span class="title">lang</span> <span class="title">is</span> <span class="title">Java</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (lang <span class="keyword">as</span> Java).helloJava !== <span class="literal">undefined</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"><span class="keyword">type</span>: Type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lang = <span class="keyword">type</span> === Type.Strong ? <span class="keyword">new</span> Java() : <span class="keyword">new</span> JavaScript();</span><br><span class="line">    <span class="comment">// 此处无法满足需要</span></span><br><span class="line">    <span class="comment">// if (lang.helloJava) &#123;</span></span><br><span class="line">    <span class="comment">//    lang.helloJava();</span></span><br><span class="line">    <span class="comment">// &#125; else (lang.helloJavaScript) &#123;</span></span><br><span class="line">    <span class="comment">//    lang.helloJavaScript();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 制造一个区块</span></span><br><span class="line">    <span class="comment">// 1. instanceof 关键字</span></span><br><span class="line">    <span class="keyword">if</span> (lang <span class="keyword">instanceof</span> Java) &#123;</span><br><span class="line">        lang.helloJava(); <span class="comment">// OK</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lang.helloJavaScript(); <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. in 关键字</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;java&#x27;</span> <span class="keyword">in</span> lang) &#123;</span><br><span class="line">        lang.helloJava(); <span class="comment">// OK</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lang.helloJavaScript(); <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. typeof 关键字</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        x.length; <span class="comment">// OK</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x.toFixed(<span class="number">2</span>); <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 类型保护函数</span></span><br><span class="line">    <span class="keyword">if</span> (isJava(lang)) &#123;</span><br><span class="line">        lang.helloJava(); <span class="comment">// OK</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lang.helloJavaScript(); <span class="comment">// OK</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lang</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> getLanguage(Type.Strong);</span><br></pre></td></tr></table></figure><h1 id="六、高级类型"><a href="#六、高级类型" class="headerlink" title="六、高级类型"></a>六、高级类型</h1><hr><h2 id="6-1-交叉类型与联合类型"><a href="#6-1-交叉类型与联合类型" class="headerlink" title="6.1 交叉类型与联合类型"></a>6.1 交叉类型与联合类型</h2><p>交叉类型：适合做对象混入<br>联合类型：类型具有不确定性，增强代码的灵活性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DogInterface &#123;</span><br><span class="line">  run(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> CatInterface &#123;</span><br><span class="line">  jump(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pet: DogInterface &amp; CatInterface = &#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">jump</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">1</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;a&quot;</span>; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值只能在 a,b,c 中</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> = <span class="string">&quot;a&quot;</span>; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">DogInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">implements</span> <span class="title">CatInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">jump</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Master &#123;</span><br><span class="line">  Boy,</span><br><span class="line">  Girl,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPet</span>(<span class="params">master: Master</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pet = master === Master.Boy ? <span class="keyword">new</span> Dog() : <span class="keyword">new</span> Cat();</span><br><span class="line">  pet.eat();</span><br><span class="line">  <span class="comment">// pet.run(); // Error</span></span><br><span class="line">  <span class="comment">// pet.jump(); // Error</span></span><br><span class="line">  <span class="keyword">return</span> pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  kind: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  size: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">  kind: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">  height: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">  kind: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  r: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Square | Rectangle | Circle;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> s.size * s.size;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> s.width * s.height;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.r ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> (<span class="function">(<span class="params">e: <span class="built_in">never</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">      &#125;)(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-索引类型"><a href="#6-2-索引类型" class="headerlink" title="6.2 索引类型"></a>6.2 索引类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValues</span>(<span class="params">obj: value, keys: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> keys.map(<span class="function">(<span class="params">key</span>) =&gt;</span> obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getValues(obj, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])); <span class="comment">// 1, 2</span></span><br><span class="line"><span class="built_in">console</span>.log(getValues(obj, [<span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>])); <span class="comment">// undefined, undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如何约束数组的元素</span></span><br><span class="line"><span class="comment">// 下面来改造以下函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValues</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, keys: K[]</span>): <span class="title">T</span>[<span class="title">K</span>][] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> keys.map(<span class="function">(<span class="params">key</span>) =&gt;</span> obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getValues(obj, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])); <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// console.log(getValues(obj, [&#x27;e&#x27;, &#x27;f&#x27;])); // Error</span></span><br></pre></td></tr></table></figure><h2 id="6-3-映射类型"><a href="#6-3-映射类型" class="headerlink" title="6.3 映射类型"></a>6.3 映射类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Obj &#123;</span><br><span class="line">  a: <span class="built_in">string</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">  c: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadonlyObj = Readonly&lt;Obj&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PartialObj = Partial&lt;Obj&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PickObj = Pick&lt;Obj, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RecordObj = Record&lt;<span class="string">&quot;x&quot;</span> | <span class="string">&quot;y&quot;</span>, Obj&gt;;</span><br></pre></td></tr></table></figure><h2 id="6-4-条件类型"><a href="#6-4-条件类型" class="headerlink" title="6.4 条件类型"></a>6.4 条件类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T extends U ? X : Y</span></span><br><span class="line"><span class="keyword">type</span> TypeName&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">  ? <span class="string">&quot;string&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="built_in">number</span></span><br><span class="line">  ? <span class="string">&quot;number&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="built_in">boolean</span></span><br><span class="line">  ? <span class="string">&quot;boolean&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="literal">undefined</span></span><br><span class="line">  ? <span class="string">&quot;undefined&quot;</span></span><br><span class="line">  : T <span class="keyword">extends</span> <span class="built_in">Function</span></span><br><span class="line">  ? <span class="string">&quot;function&quot;</span></span><br><span class="line">  : <span class="string">&quot;object&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T1 = TypeName&lt;<span class="built_in">string</span>&gt;; <span class="comment">// T1类型是 string</span></span><br><span class="line"><span class="keyword">type</span> T2 = TypeName&lt;<span class="built_in">string</span>[]&gt;; <span class="comment">// T1类型是 object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ( A | B ) extends U ? X : Y</span></span><br><span class="line"><span class="comment">// ( A extends U ? X : Y ) | ( B extends U ? X : Y )</span></span><br><span class="line"><span class="keyword">type</span> T3 = TypeName&lt;<span class="built_in">string</span> | <span class="built_in">string</span>[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Diff&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T4 = Diff&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;e&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NotNull&lt;T&gt; = Diff&lt;T, <span class="literal">undefined</span> | <span class="literal">null</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> T5 = NotNull&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方预置的：</span></span><br><span class="line"><span class="comment">// Exclude&lt;T, U&gt;</span></span><br><span class="line"><span class="comment">// NonNullable&lt;T&gt;</span></span><br><span class="line"><span class="comment">// Extract&lt;T, U&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Y7 = ReturnType&lt;<span class="function">() =&gt;</span> stringn&gt;;</span><br></pre></td></tr></table></figure><h1 id="七、ES6-与-CommonJS-的模块系统"><a href="#七、ES6-与-CommonJS-的模块系统" class="headerlink" title="七、ES6 与 CommonJS 的模块系统"></a>七、ES6 与 CommonJS 的模块系统</h1><hr><h2 id="7-1-两种模式不要混用"><a href="#7-1-两种模式不要混用" class="headerlink" title="7.1 两种模式不要混用"></a>7.1 两种模式不要混用</h2><ol><li>ES6</li><li>CommonJS</li></ol><h1 id="八、命名空间"><a href="#八、命名空间" class="headerlink" title="八、命名空间"></a>八、命名空间</h1><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.ts</span></span><br><span class="line"><span class="keyword">namespace</span> Shape &#123;</span><br><span class="line">  <span class="keyword">const</span> pi = <span class="built_in">Math</span>.PI;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cricle</span>(<span class="params">r: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pi * r ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.ts</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面是三斜线指令</span></span><br><span class="line"><span class="comment"> * 在 b.ts 调用 a.ts 的 cricle 方法 必须加上此指令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Shape &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Shape.cricle(<span class="number">2</span>)); <span class="comment">// 12.56 共享命名空间</span></span><br><span class="line"><span class="built_in">console</span>.log(Shape.pi); <span class="comment">// underfined 命名空间内的属性必须导出才能访问</span></span><br><span class="line"><span class="built_in">console</span>.log(Shape.square(<span class="number">2</span>)); <span class="comment">// 4  共享命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了使得写法更加简便</span></span><br><span class="line"><span class="comment"> * 可以使用此写法</span></span><br><span class="line"><span class="comment"> * 此写法和模块没有关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> cricle = Shape.cricle;</span><br><span class="line"><span class="built_in">console</span>.log(cricle(<span class="number">1</span>)); <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure><h1 id="九、声明合并"><a href="#九、声明合并" class="headerlink" title="九、声明合并"></a>九、声明合并</h1><hr><h2 id="9-1-接口合并"><a href="#9-1-接口合并" class="headerlink" title="9.1 接口合并"></a>9.1 接口合并</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后申明的接口顺序靠前，接口内部函数先声明的靠前</span></span><br><span class="line"><span class="comment"> * 函数参数类型为字面量时，优先级最高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// y: string; // Error</span></span><br><span class="line">  foo(bar: <span class="built_in">number</span>): <span class="built_in">number</span>; <span class="comment">// 函数重载顺序 5</span></span><br><span class="line">  foo(bar: <span class="string">&quot;a&quot;</span>): <span class="built_in">number</span>; <span class="comment">// 函数重载顺序 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">  foo(bar: <span class="built_in">string</span>): <span class="built_in">string</span>; <span class="comment">// 函数重载顺序 3</span></span><br><span class="line">  foo(bar: <span class="built_in">number</span>[]): <span class="built_in">number</span>[]; <span class="comment">// 函数重载顺序 4</span></span><br><span class="line">  foo(bar: <span class="string">&quot;b&quot;</span>): <span class="built_in">number</span>; <span class="comment">// 函数重载顺序 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个变量必须具备这两个接口的所有成员</span></span><br><span class="line"><span class="keyword">let</span> a: A = &#123;</span><br><span class="line">  x: <span class="number">1</span>,</span><br><span class="line">  y: <span class="number">1</span>,</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params">bar: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 函数重载</span></span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-2-函数与命名空间合并"><a href="#9-2-函数与命名空间合并" class="headerlink" title="9.2 函数与命名空间合并"></a>9.2 函数与命名空间合并</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Lib</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">namespace</span> Lib &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> version = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Lib.version); <span class="comment">// 1.0</span></span><br></pre></td></tr></table></figure><h2 id="9-3-类与命名空间合并"><a href="#9-3-类与命名空间合并" class="headerlink" title="9.3 类与命名空间合并"></a>9.3 类与命名空间合并</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">namespace</span> C &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> state = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(C.state); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="9-4-枚举与命名空间合并"><a href="#9-4-枚举与命名空间合并" class="headerlink" title="9.4 枚举与命名空间合并"></a>9.4 枚举与命名空间合并</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Yellow,</span><br><span class="line">  Bule,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Color &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Color);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *     0: &quot;Red&quot;,</span></span><br><span class="line"><span class="comment"> *     1: &quot;Yellow&quot;,</span></span><br><span class="line"><span class="comment"> *     2: &quot;Bule&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;Red&quot;: 0,</span></span><br><span class="line"><span class="comment"> *     &quot;Yellow&quot;: 1,</span></span><br><span class="line"><span class="comment"> *     &quot;Blue&quot;: 2,</span></span><br><span class="line"><span class="comment"> *     &quot;mix&quot;: f mix ()</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="十、如何编写声明文件"><a href="#十、如何编写声明文件" class="headerlink" title="十、如何编写声明文件"></a>十、如何编写声明文件</h1><hr><p>引入第三方类库并为它们编写声明文件<br>类库分为三种：</p><ol><li>全局类库</li><li>模块类库</li><li>umd 类库</li></ol><h1 id="十一、引入-jQuery"><a href="#十一、引入-jQuery" class="headerlink" title="十一、引入 jQuery"></a>十一、引入 jQuery</h1><hr><h2 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br><span class="line">npm i @types/jquery -D</span><br></pre></td></tr></table></figure><p>大多数类库都会提供声明文件<br>可以上 <a href="microsoft.github.io/TypeSearch">TypeSearch</a> 去查找社区有没有为类库提供声明文件</p><h2 id="11-2-使用"><a href="#11-2-使用" class="headerlink" title="11.2 使用"></a>11.2 使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line">$(<span class="string">&quot;.app&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="十二、如何自己编写一个声明文件"><a href="#十二、如何自己编写一个声明文件" class="headerlink" title="十二、如何自己编写一个声明文件"></a>十二、如何自己编写一个声明文件</h1><hr><blockquote><p>可以参考此网站 <a href="definitelytyped.org/guides/contributing.html">Definitely Typed</a></p></blockquote><h2 id="12-1-全局库"><a href="#12-1-全局库" class="headerlink" title="12.1 全局库"></a>12.1 全局库</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global-lib.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalLib</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">globalLib.version = <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">globalLib.doSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;global Lib do something&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// global-lib.d.js 声明文件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">globalLib</span>(<span class="params">options: globalLib.Options</span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> globalLib &#123;</span><br><span class="line">  <span class="keyword">const</span> version: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">  <span class="keyword">interface</span> Options &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example.ts 使用示范</span></span><br><span class="line"><span class="built_in">console</span>.log(globalLib(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(globalLib.doSomething());</span><br></pre></td></tr></table></figure><h2 id="12-2-模块库"><a href="#12-2-模块库" class="headerlink" title="12.2 模块库"></a>12.2 模块库</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module-lib.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moduleLib</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">moduleLib.version = <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">moduleLib.doSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;moduleLib Lib do something&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = moduleLib;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module-lib.d.js 声明文件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">moduleLib</span>(<span class="params">options: globalLib.Options</span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Options &#123;</span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> moduleLib &#123;</span><br><span class="line">  <span class="keyword">const</span> version: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = moduleLib;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example.ts 使用示范</span></span><br><span class="line"><span class="keyword">import</span> moduleLib <span class="keyword">from</span> <span class="string">&quot;./module-lib.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(moduleLib.doSomething());</span><br></pre></td></tr></table></figure><h2 id="12-3-umd-库"><a href="#12-3-umd-库" class="headerlink" title="12.3 umd 库"></a>12.3 umd 库</h2><h5 id="tsconfig-默认不允许-umd-使用全局引用方式，若如果想通过全局引用，则需要打开设置-“allowUmdGlobalAccess”-true"><a href="#tsconfig-默认不允许-umd-使用全局引用方式，若如果想通过全局引用，则需要打开设置-“allowUmdGlobalAccess”-true" class="headerlink" title="tsconfig 默认不允许 umd 使用全局引用方式，若如果想通过全局引用，则需要打开设置 “allowUmdGlobalAccess”: true"></a>tsconfig 默认不允许 umd 使用全局引用方式，若如果想通过全局引用，则需要打开设置 “allowUmdGlobalAccess”: true</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umd-lib.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    define(factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = factory();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    root.umdLib = factory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    version: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">doSomething</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;umdLib do something&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// umd-lib.d.js 声明文件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> umdLib &#123;</span><br><span class="line">  <span class="keyword">const</span> version: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">as</span> <span class="keyword">namespace</span> umdLib;</span><br><span class="line">export = umdLib;</span><br><span class="line"></span><br><span class="line">// example.ts 使用示范</span><br><span class="line">import umdLib from &quot;./umd-lib.js&quot;;</span><br><span class="line"></span><br><span class="line">console.log(umdLib.doSomething());</span><br></pre></td></tr></table></figure><h2 id="12-4-给类库添加自定义方法"><a href="#12-4-给类库添加自定义方法" class="headerlink" title="12.4 给类库添加自定义方法"></a>12.4 给类库添加自定义方法</h2><blockquote><p>这里以 moment 为例</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;moment&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.myFunction = <span class="function">() =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="12-5-声明文件的依赖"><a href="#12-5-声明文件的依赖" class="headerlink" title="12.5 声明文件的依赖"></a>12.5 声明文件的依赖</h2><blockquote><p>这里以 jQuery 为例</p></blockquote><h6 id="node-modules-types-jquery-package-json"><a href="#node-modules-types-jquery-package-json" class="headerlink" title="/node_modules/@types/jquery/package.json"></a>/node_modules/@types/jquery/package.json</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;types&quot;: &quot;index&quot;</span><br></pre></td></tr></table></figure><h6 id="node-modules-types-jquery-index-d-js"><a href="#node-modules-types-jquery-index-d-js" class="headerlink" title="/node_modules/@types/jquery/index.d.js"></a>/node_modules/@types/jquery/index.d.js</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;sizzle&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;jQueryStatic.d.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;JQuery.d.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;misc.d.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;legacy.d.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = jQuery;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
